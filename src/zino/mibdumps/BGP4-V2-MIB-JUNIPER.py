#
# PySNMP MIB module BGP4-V2-MIB-JUNIPER (http://snmplabs.com/pysmi)
# ASN.1 source file://./BGP4-V2-MIB-JUNIPER.mib
# Produced by pysmi-1.1.10 at Wed Aug 23 14:33:37 2023
# On host Johanna-England-Sikt platform Linux version 6.2.0-26-generic by user johanna
# Using Python version 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
InetAutonomousSystemNumber, InetPortNumber, InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAutonomousSystemNumber", "InetPortNumber", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
jnxBgpM2Experiment, = mibBuilder.importSymbols("JUNIPER-EXPERIMENT-MIB", "jnxBgpM2Experiment")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter32, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, iso, Bits, Unsigned32, NotificationType, ModuleIdentity, ObjectIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "iso", "Bits", "Unsigned32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Gauge32")
RowStatus, DisplayString, StorageType, RowPointer, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "StorageType", "RowPointer", "TextualConvention", "TruthValue")
jnxBgpM2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1))
jnxBgpM2.setRevisions(('2012-12-17 00:00', '2003-09-09 15:08', '2002-11-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxBgpM2.setRevisionsDescriptions(('This change redefines the value returned for the -- *** JNX *** variable jnxBgpM2PrefixesInPrefixesRejected so that -- *** JNX *** it conforms to the definition. -- *** JNX *** It also adds a new counter in the same sequence to -- *** JNX *** return the number of active prefixes received from -- *** JNX *** the peer: jnxBgpM2PrefixInPrefixesActive', 'This is a proprietary implementation of the -- *** JNX *** draft-ietf-idr-bgp4-mibv2-03.txt MIB as written by -- *** JNX *** the IETF Inter-Domain Routing Working Group. -- *** JNX *** This Juniper experimental MIB will be retired when a -- *** JNX *** valid oid branch is assigned.', 'draft-ietf-idr-bgp4-mibv2-03.txt version written by -- *** JNX *** the IETF Inter-Domain Routing Working Group.',))
if mibBuilder.loadTexts: jnxBgpM2.setLastUpdated('200309091508Z')
if mibBuilder.loadTexts: jnxBgpM2.setOrganization('IETF IDR Working Group')
if mibBuilder.loadTexts: jnxBgpM2.setContactInfo('E-mail: idr@merit.net Jeffrey Haas (Editor) 825 Victors Way, Suite 100 Ann Arbor, MI 48108 Tel: +1 734 222-1600 Fax: +1 734 222-1602 E-mail: jhaas@nexthop.com')
if mibBuilder.loadTexts: jnxBgpM2.setDescription('This MIB module defines management objects for the Border Gateway Protocol, Version 4.')
class JnxBgpM2Identifier(TextualConvention, OctetString):
    description = 'The representation of a BGP Identifier. The BGP Identifier should be represented in the OCTET STRING as with the first OCTET of the string containing the first OCTET of the BGP Identifier received or sent in the OPEN packet and so on. Even though the BGP Identifier is trending away from an IP address it is still displayed as if it was one, even when it would be an illegal IP address.'
    status = 'current'
    displayHint = '1d.'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class JnxBgpM2Safi(TextualConvention, Unsigned32):
    description = 'The representation of a BGP Safi'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 255)

class JnxBgpM2Community(TextualConvention, OctetString):
    description = 'The representation of a BGP Community.'
    status = 'current'
    displayHint = '2d:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class JnxBgpM2ExtendedCommunity(TextualConvention, OctetString):
    description = 'The representation of a BGP Extended Community.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

jnxBgpM2BaseScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1))
jnxBgpM2BaseNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 0))
jnxBgpM2Established = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 0, 1)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLocalAddrType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLocalAddr"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRemoteAddrType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRemoteAddr"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLastErrorReceived"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerState"))
if mibBuilder.loadTexts: jnxBgpM2Established.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2Established.setDescription('The BGP Established event is generated when the BGP FSM enters the ESTABLISHED state.')
jnxBgpM2BackwardTransition = NotificationType((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 0, 2)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLocalAddrType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLocalAddr"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRemoteAddrType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRemoteAddr"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLastErrorReceived"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLastErrorReceivedText"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerState"))
if mibBuilder.loadTexts: jnxBgpM2BackwardTransition.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2BackwardTransition.setDescription('The BGPBackwardTransition Event is generated when the BGP FSM moves from a higher numbered state to a lower numbered state.')
jnxBgpM2Version = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 1))
jnxBgpM2VersionTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxBgpM2VersionTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2VersionTable.setDescription('Table of supported BGP versions.')
jnxBgpM2VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2VersionIndex"))
if mibBuilder.loadTexts: jnxBgpM2VersionEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2VersionEntry.setDescription('Entry containing data on a given supported version of the Border Gateway Protocol and the level of support provided. It is expected that any agent implementation supporting this MIB module will report support for Version 4 of the Border Gateway Protocol at the very minimum.')
jnxBgpM2VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2VersionIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2VersionIndex.setDescription('The version number of the BGP Protocol.')
jnxBgpM2VersionSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2VersionSupported.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2VersionSupported.setDescription("This value is TRUE if this version of the BGP protocol identified in 'jnxBgpM2VersionIndex' is supported. The absence of a row for a particular jnxBgpM2VersionIndex indicates that that jnxBgpM2VersionIndex protocol version number is not supported.")
jnxBgpM2SupportedAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 2))
jnxBgpM2SupportedAuthTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: jnxBgpM2SupportedAuthTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2SupportedAuthTable.setDescription('The supported BGP authentication mechanisms.')
jnxBgpM2SupportedAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2SupportedAuthCode"))
if mibBuilder.loadTexts: jnxBgpM2SupportedAuthEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2SupportedAuthEntry.setDescription('Entry containing information whether a given BGP authentication mechanism is supported by this implementation.')
jnxBgpM2SupportedAuthCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2SupportedAuthCode.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2SupportedAuthCode.setDescription('The BGP authentication code.')
jnxBgpM2SupportedAuthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2SupportedAuthValue.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2SupportedAuthValue.setDescription('This value is TRUE if a given authentication method is supported by the local implementation.')
jnxBgpM2SupportedCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 3))
jnxBgpM2CapabilitySupportAvailable = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 3, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2CapabilitySupportAvailable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CapabilitySupportAvailable.setDescription('This value is TRUE if capability support is available and is enabled.')
jnxBgpM2SupportedCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 3, 2), )
if mibBuilder.loadTexts: jnxBgpM2SupportedCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2SupportedCapabilitiesTable.setDescription('Table of supported BGP-4 capabilities.')
jnxBgpM2SupportedCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 3, 2, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2SupportedCapabilityCode"))
if mibBuilder.loadTexts: jnxBgpM2SupportedCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2SupportedCapabilitiesEntry.setDescription('Information about supported capabilities indexed by capability number.')
jnxBgpM2SupportedCapabilityCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2SupportedCapabilityCode.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2SupportedCapabilityCode.setDescription('Index of supported capability. The index directly corresponds with the BGP-4 Capability Advertisement Capability Code.')
jnxBgpM2SupportedCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2SupportedCapability.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2SupportedCapability.setDescription('This value is True if this capability is supported, False otherwise.')
jnxBgpM2AsSize = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoOctet", 1), ("fourOctet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsSize.setReference('draft-ietf-idr-as4bytes-04')
if mibBuilder.loadTexts: jnxBgpM2AsSize.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsSize.setDescription('The size of the AS value in this implementation. The semantics of this are determined as per the as-4bytes draft.')
jnxBgpM2LocalAs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 5), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2LocalAs.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2LocalAs.setDescription('The local autonomous system number. If the jnxBgpM2AsSize is twoOctet, then the range is constrained to be 0-65535.')
jnxBgpM2LocalIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 6), JnxBgpM2Identifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2LocalIdentifier.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2LocalIdentifier.setDescription('The BGP Identifier of local system. Current practice is trending away from this value being treated as an IP address and more as a generic identifier.')
jnxBgpM2BaseScalarExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 7))
jnxBgpM2BaseScalarNonCapExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 7, 1))
jnxBgpM2BaseScalarCapExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 7, 2))
jnxBgpM2BaseScalarRouteReflectExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 7, 1, 2796))
jnxBgpM2RouteReflector = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 7, 1, 2796, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2RouteReflector.setReference('RFC 2796 - BGP Route Reflection')
if mibBuilder.loadTexts: jnxBgpM2RouteReflector.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2RouteReflector.setDescription('This value is TRUE if this implementation supports the BGP Route Reflection Extension and is enabled as a route reflector. If the BGP Route Reflection extension is not supported this value must be FALSE.')
jnxBgpM2ClusterId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 7, 1, 2796, 2), JnxBgpM2Identifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2ClusterId.setReference('RFC 2796 - BGP Route Reflection')
if mibBuilder.loadTexts: jnxBgpM2ClusterId.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2ClusterId.setDescription("The configured Cluster-ID of the BGP Speaker. This will default to the BGP Speaker's JnxBgpM2Identifier if this speaker is functioning as a route reflector and an explicit Cluster-ID has not been configured. A value of 0.0.0.0 will be present if Route Reflection is not enabled.")
jnxBgpM2BaseScalarASConfedExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 7, 1, 3065))
jnxBgpM2ConfederationRouter = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 7, 1, 3065, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2ConfederationRouter.setReference('RFC 3065 - Autonomous System Confederations for BGP')
if mibBuilder.loadTexts: jnxBgpM2ConfederationRouter.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2ConfederationRouter.setDescription('This value is TRUE if this implementation supports the BGP AS Confederations Extension and this router is configured to be in a confederation.')
jnxBgpM2ConfederationId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 7, 1, 3065, 2), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2ConfederationId.setReference('RFC 3065 - Autonomous System Confederations for BGP')
if mibBuilder.loadTexts: jnxBgpM2ConfederationId.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2ConfederationId.setDescription('The local Confederation Identification Number. This value will be zero (0) if this BGP Speaker is not a confederation router.')
jnxBgpM2BaseScalarConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8))
jnxBgpM2CfgBaseScalarStorageType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 1), StorageType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxBgpM2CfgBaseScalarStorageType.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgBaseScalarStorageType.setDescription('This object specifies the intended storage type for all configurable base scalars.')
jnxBgpM2CfgLocalAs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 2), InetAutonomousSystemNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxBgpM2CfgLocalAs.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgLocalAs.setDescription('The local autonomous system number. If the jnxBgpM2AsSize is twoOctet, then the range is constrained to be 0-65535.')
jnxBgpM2CfgLocalIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 3), JnxBgpM2Identifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxBgpM2CfgLocalIdentifier.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgLocalIdentifier.setDescription('The BGP Identifier of local system. Current practice is trending away from this value being treated as an IP address and more as a generic identifier.')
jnxBgpM2CfgBaseScalarExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 4))
jnxBgpM2CfgBaseScalarNonCapExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 4, 1))
jnxBgpM2CfgBaseScalarCapExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 4, 2))
jnxBgpM2CfgBaseScalarReflectorExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 4, 1, 2796))
jnxBgpM2CfgRouteReflector = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 4, 1, 2796, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxBgpM2CfgRouteReflector.setReference('RFC 2796 - BGP Route Reflection')
if mibBuilder.loadTexts: jnxBgpM2CfgRouteReflector.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgRouteReflector.setDescription('This value is set to true if this implementation will be supporting route reflection.')
jnxBgpM2CfgClusterId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 4, 1, 2796, 2), JnxBgpM2Identifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxBgpM2CfgClusterId.setReference('RFC 2796 - BGP Route Reflection')
if mibBuilder.loadTexts: jnxBgpM2CfgClusterId.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgClusterId.setDescription("The configured Cluster-ID of the BGP Speaker. This will default to the BGP Speaker's JnxBgpM2Identifier if this speaker is functioning as a route reflector and an explicit Cluster-ID has not been configured. A value of 0.0.0.0 will be present if Route Reflection is not enabled.")
jnxBgpM2CfgBaseScalarASConfedExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 4, 1, 3065))
jnxBgpM2CfgConfederationRouter = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 4, 1, 3065, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxBgpM2CfgConfederationRouter.setReference('RFC 3065 - Autonomous System Confederations for BGP')
if mibBuilder.loadTexts: jnxBgpM2CfgConfederationRouter.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgConfederationRouter.setDescription('This value is set to true if this implementation will be supporting BGP AS Confederations.')
jnxBgpM2CfgConfederationId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 1, 8, 4, 1, 3065, 2), InetAutonomousSystemNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxBgpM2CfgConfederationId.setReference('RFC 3065 - Autonomous System Confederations for BGP')
if mibBuilder.loadTexts: jnxBgpM2CfgConfederationId.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgConfederationId.setDescription('The local Confederation Identification Number. This value will be zero (0) if this BGP Speaker is not a confederation router.')
jnxBgpM2Peer = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2))
jnxBgpM2PeerData = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1))
jnxBgpM2PeerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: jnxBgpM2PeerTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerTable.setDescription('BGP peer table. This table contains, one entry per remote BGP peer, any information about the connections with the remote BGP peers.')
jnxBgpM2PeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRoutingInstance"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLocalAddrType"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLocalAddr"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRemoteAddrType"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRemoteAddr"))
if mibBuilder.loadTexts: jnxBgpM2PeerEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerEntry.setDescription('Entry containing information about the connection with a remote BGP peer.')
jnxBgpM2PeerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 1), JnxBgpM2Identifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerIdentifier.setReference('draft-ietf-idr-bgp4-17.txt, Sec. 4.2')
if mibBuilder.loadTexts: jnxBgpM2PeerIdentifier.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerIdentifier.setDescription("The BGP Identifier of this entry's remote BGP peer. This entry should be 0.0.0.0 unless the jnxBgpM2PeerState is in the OpenConfirm or the Established state.")
jnxBgpM2PeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerState.setReference('draft-ietf-idr-bgp4-17.txt, Sec. 8')
if mibBuilder.loadTexts: jnxBgpM2PeerState.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerState.setDescription("The remote BGP peer's FSM state.")
jnxBgpM2PeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halted", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerStatus.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerStatus.setDescription('Whether or not the BGP FSM for this remote peer is halted or running. The BGP FSM for a remote peer is halted after processing a Stop event. Likewise, it is in the running state after a Start event. The jnxBgpM2PeerState will generally be in the idle state when the FSM is halted, although some extensions such as Graceful Restart will leave the peer in the Idle state but with the FSM running.')
jnxBgpM2PeerConfiguredVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerConfiguredVersion.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerConfiguredVersion.setDescription('The configured version to originally start with this remote peer. The BGP speaker may permit negotiation to a lower version number of the protocol.')
jnxBgpM2PeerNegotiatedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerNegotiatedVersion.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerNegotiatedVersion.setDescription('The negotiated version of BGP running between the two peers.')
jnxBgpM2PeerLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLocalAddrType.setDescription('The address family of the local end of the peering session.')
jnxBgpM2PeerLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 7), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLocalAddr.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLocalAddr.setDescription('The address of the local end of the peering session.')
jnxBgpM2PeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLocalPort.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLocalPort.setDescription('The local port for the TCP connection between the BGP peers.')
jnxBgpM2PeerLocalAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 9), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLocalAs.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLocalAs.setDescription('Some implementations of BGP can represent themselves as multiple ASs. This is the AS that this peering session is representing itself as to the remote peer.')
jnxBgpM2PeerRemoteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerRemoteAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerRemoteAddrType.setDescription('The address family of the remote end of the peering session.')
jnxBgpM2PeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 11), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerRemoteAddr.setDescription('The address of the remote end of the peering session.')
jnxBgpM2PeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 12), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerRemotePort.setReference('RFC 2012 - SNMPv2 Management Information Base for the Transmission Control Protocol using SMIv2. RFC 2542 - IP Version 6 Management Information Base for the Transmission Control Protocol.')
if mibBuilder.loadTexts: jnxBgpM2PeerRemotePort.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerRemotePort.setDescription("The remote port for the TCP connection between the BGP peers. In the case of a transport for which the notion of 'port' is irrelevant, an instance value of -1 should be returned by the agent for this object. Note that the objects jnxBgpM2PeerLocalAddr, jnxBgpM2PeerLocalPort, jnxBgpM2PeerRemoteAddr and jnxBgpM2PeerRemotePort provide the appropriate reference to the standard MIB TCP connection table. or even the ipv6 TCP MIB as in rfc2452.")
jnxBgpM2PeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 13), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerRemoteAs.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerRemoteAs.setDescription('The remote autonomous system number.')
jnxBgpM2PeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerIndex.setDescription('This value is a unique index for the remote peer entry in the jnxBgpM2PeerTable. It is assigned by the agent at the point of creation of the jnxBgpM2PeerTable row entry. While its value is guaranteed to be unique at any time, it is otherwise opaque to the management application with respect to its value or the contiguity of jnxBgpM2PeerIndex row instance values across rows of the jnxBgpM2PeerTable. It is used to provide an index structure for other tables whose data is logically per-peer. For explicitly configured peers, this value will remain consistent until this row is deleted by deleting the configured peers. Unconfigured peers will generate a monotonically increasing number when a BGP FSM is built to process the peering session. Values in the jnxBgpM2PeerTable and other tables utilizing jnxBgpM2PeerIndex are expected to remain in existence for an arbitrary time after the unconfigured peer has been deleted in order to allow management applications to extract useful management information for those peers. Thus, an unconfigured peer using the same indices as the jnxBgpM2PeerTable that comes up while this row still exists will re-utilize the same row.')
jnxBgpM2PeerRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerRoutingInstance.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerRoutingInstance.setDescription('Routing instance index.')
jnxBgpM2PeerErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 2))
jnxBgpM2PeerErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: jnxBgpM2PeerErrorsTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerErrorsTable.setDescription('On a per peer basis, this table reflects the last protocol-defined error encountered and reported on the peer session. If no entry for a given peer, by its jnxBgpM2PeerIndex, exists in this table, then no such errors have been observed, reported, and recorded on the session.')
jnxBgpM2PeerErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 2, 1, 1), )
jnxBgpM2PeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerErrorsEntry"))
jnxBgpM2PeerErrorsEntry.setIndexNames(*jnxBgpM2PeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2PeerErrorsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerErrorsEntry.setDescription('Each entry contains information about errors sent and received for a particular BGP peer.')
jnxBgpM2PeerLastErrorReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorReceived.setReference('draft-ietf-idr-bgp4-15.txt, Sec. 4.5')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorReceived.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorReceived.setDescription('The last error code and subcode received by this BGP Speaker via a NOTIFICATION message for this peer. If no error has occurred, this field is zero. Otherwise, the first byte of this two byte OCTET STRING contains the error code, and the second byte contains the subcode.')
jnxBgpM2PeerLastErrorSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorSent.setReference('draft-ietf-idr-bgp4-15.txt, Sec. 4.5')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorSent.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorSent.setDescription('The last error code and subcode sent by this BGP Speaker via a NOTIFICATION message to this peer. If no error has occurred, this field is zero. Otherwise, the first byte of this two byte OCTET STRING contains the error code, and the second byte contains the subcode.')
jnxBgpM2PeerLastErrorReceivedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorReceivedTime.setReference('draft-ietf-idr-bgp4-15.txt, Sec. 4.5')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorReceivedTime.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorReceivedTime.setDescription('The timestamp that the last NOTIFICATION was received from this peer.')
jnxBgpM2PeerLastErrorSentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorSentTime.setReference('draft-ietf-idr-bgp4-15.txt, Sec. 4.5')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorSentTime.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorSentTime.setDescription('The timestamp that the last NOTIFICATION was sent to this peer.')
jnxBgpM2PeerLastErrorReceivedText = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 2, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorReceivedText.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorReceivedText.setDescription('This object contains an implementation specific explanation of the error that was reported.')
jnxBgpM2PeerLastErrorSentText = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 2, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorSentText.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorSentText.setDescription('This object contains an implementation specific explanation of the error that is being reported.')
jnxBgpM2PeerLastErrorReceivedData = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4075))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorReceivedData.setReference('draft-ietf-idr-bgp4-15.txt, Sec. 4.5')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorReceivedData.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorReceivedData.setDescription("The last error code's data seen by this peer.")
jnxBgpM2PeerLastErrorSentData = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4075))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorSentData.setReference('draft-ietf-idr-bgp4-15.txt, Sec. 4.5')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorSentData.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerLastErrorSentData.setDescription("The last error code's data sent to this peer.")
jnxBgpM2PeerAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 3))
jnxBgpM2PeerAuthTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: jnxBgpM2PeerAuthTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerAuthTable.setDescription('BGP peer authentication table. This table contains, one entry per BGP peer, information about the authentication with BGP peers.')
jnxBgpM2PeerAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 3, 1, 1), )
jnxBgpM2PeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerAuthEntry"))
jnxBgpM2PeerAuthEntry.setIndexNames(*jnxBgpM2PeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2PeerAuthEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerAuthEntry.setDescription('Entry containing information about the authentication with a BGP peer.')
jnxBgpM2PeerAuthSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 3, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerAuthSent.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerAuthSent.setDescription('The local peer has sent authentication information to the remote peer in the BGP Authentication field.')
jnxBgpM2PeerAuthSentCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerAuthSentCode.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerAuthSentCode.setDescription('The code of the authentication information sent to the remote peer.')
jnxBgpM2PeerAuthSentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 252))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerAuthSentValue.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerAuthSentValue.setDescription('The payload of the authentication information from the remote peer.')
jnxBgpM2PeerAuthRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerAuthRcvd.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerAuthRcvd.setDescription('The local peer has received authentication information from the remote peer in the BGP Authentication field.')
jnxBgpM2PeerAuthRcvdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 3, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerAuthRcvdCode.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerAuthRcvdCode.setDescription('The code of the authentication information received from the remote peer.')
jnxBgpM2PeerAuthRcvdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 252))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerAuthRcvdValue.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerAuthRcvdValue.setDescription('The payload of the authentication information from the remote peer.')
jnxBgpM2PeerTimers = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4))
jnxBgpM2PeerEventTimesTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 1), )
if mibBuilder.loadTexts: jnxBgpM2PeerEventTimesTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerEventTimesTable.setDescription('A table reporting the per-peering session amount of time elapsed and update events since the peering session advanced into the Established state.')
jnxBgpM2PeerEventTimesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 1, 1), )
jnxBgpM2PeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerEventTimesEntry"))
jnxBgpM2PeerEventTimesEntry.setIndexNames(*jnxBgpM2PeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2PeerEventTimesEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerEventTimesEntry.setDescription('Each row contains a set of statistics about time spent and events encountered in the peer session Established state.')
jnxBgpM2PeerFsmEstablishedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerFsmEstablishedTime.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerFsmEstablishedTime.setDescription('This timer indicates how long (in seconds) this peer has been in the Established state or how long since this peer was last in the Established state. It is set to zero when a new peer is configured or the router is booted.')
jnxBgpM2PeerInUpdatesElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerInUpdatesElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerInUpdatesElapsedTime.setDescription('Elapsed time in seconds since the last BGP UPDATE message was received from the peer. Each time jnxBgpM2PeerInUpdates is incremented, the value of this object is set to zero (0). This value shall also be zero (0) when the peer is not in the Established state')
jnxBgpM2PeerConfiguredTimersTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 2), )
if mibBuilder.loadTexts: jnxBgpM2PeerConfiguredTimersTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerConfiguredTimersTable.setDescription('Per peer management data on BGP session timers.')
jnxBgpM2PeerConfiguredTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 2, 1), )
jnxBgpM2PeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerConfiguredTimersEntry"))
jnxBgpM2PeerConfiguredTimersEntry.setIndexNames(*jnxBgpM2PeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2PeerConfiguredTimersEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerConfiguredTimersEntry.setDescription('Each entry corresponds to the current state of BGP timers on a given peering session.')
jnxBgpM2PeerConnectRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerConnectRetryInterval.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerConnectRetryInterval.setDescription('Time interval in seconds for the ConnectRetry timer. The suggested value for this timer is 120 seconds.')
jnxBgpM2PeerHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerHoldTimeConfigured.setReference('draft-ietf-idr-bgp4-17.txt, Appendix 6.4')
if mibBuilder.loadTexts: jnxBgpM2PeerHoldTimeConfigured.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerHoldTimeConfigured.setDescription('Time interval in seconds for the Hold Time configured for this BGP speaker with this peer. This value is placed in an OPEN message sent to this peer by this BGP speaker, and is compared with the Hold Time field in an OPEN message received from the peer when determining the Hold Time (jnxBgpM2PeerHoldTime) with the peer. This value must not be less than three seconds if it is not zero (0) in which case the Hold Time is NOT to be established with the peer. The suggested value for this timer is 90 seconds.')
jnxBgpM2PeerKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 21845), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerKeepAliveConfigured.setReference('draft-ietf-idr-bgp4-17.txt, Appendix 6.4')
if mibBuilder.loadTexts: jnxBgpM2PeerKeepAliveConfigured.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerKeepAliveConfigured.setDescription('Time interval in seconds for the KeepAlive timer configured for this BGP speaker with this peer. The value of this object will only determine the KEEPALIVE messages frequency relative to the value specified in jnxBgpM2PeerHoldTimeConfigured; the actual time interval for the KEEPALIVE messages is indicated by jnxBgpM2PeerKeepAlive. A reasonable maximum value for this timer would be configured to be one third of that of jnxBgpM2PeerHoldTimeConfigured. If the value of this object is zero (0), no periodical KEEPALIVE messages are sent to the peer after the BGP connection has been established. The suggested value for this timer is 30 seconds.')
jnxBgpM2PeerMinASOrigInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerMinASOrigInterval.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerMinASOrigInterval.setDescription('Time interval in seconds for the MinASOriginationInterval timer. The suggested value for this timer is 15 seconds.')
jnxBgpM2PeerMinRouteAdverInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerMinRouteAdverInterval.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerMinRouteAdverInterval.setDescription('Time interval in seconds for the MinRouteAdvertisementInterval timer. The suggested value for this timer is 30 seconds.')
jnxBgpM2PeerNegotiatedTimersTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 3), )
if mibBuilder.loadTexts: jnxBgpM2PeerNegotiatedTimersTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerNegotiatedTimersTable.setDescription('Current values of per-peer timers which can be dynamically set in the jnxBgpM2PeerConfiguredTimersTable. Values reflected in this table are the current operational values, after negotiation from values derived from initial configuration or last set from jnxBgpM2PeerConfiguredTimersTable row instances.')
jnxBgpM2PeerNegotiatedTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 3, 1), )
jnxBgpM2PeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerNegotiatedTimersEntry"))
jnxBgpM2PeerNegotiatedTimersEntry.setIndexNames(*jnxBgpM2PeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2PeerNegotiatedTimersEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerNegotiatedTimersEntry.setDescription('Each entry reflects a value of the currently operational, negotiated timers as reflected in the JnxBgpM2PeerNegotiatedTimersEntry.')
jnxBgpM2PeerHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerHoldTime.setReference('draft-ietf-idr-bgp4-17.txt, Sec. 4.2')
if mibBuilder.loadTexts: jnxBgpM2PeerHoldTime.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerHoldTime.setDescription('The value of this object is calculated by this BGP Speaker as being; zero (0) - if this was the value sent by the peer and this value is permitted by this BGP Speaker. In this case, no keepalive messages are sent and the Hold Timer is not set. At least three (3). This value is the smaller of the value sent by this peer in the OPEN message and jnxBgpM2PeerHoldTimeConfigured for this peer. This value is only defined when the peering session is in the Established state.')
jnxBgpM2PeerKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 4, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 21845), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerKeepAlive.setReference('draft-ietf-idr-bgp4-17, Sec. 4.4')
if mibBuilder.loadTexts: jnxBgpM2PeerKeepAlive.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerKeepAlive.setDescription('Time interval in seconds for the KeepAlive timer established with the peer. The value of this object is calculated by this BGP speaker such that, when compared with jnxBgpM2PeerHoldTime, it has the same proportion as what jnxBgpM2PeerKeepAliveConfigured has when compared with jnxBgpM2PeerHoldTimeConfigured. If the value of this object is zero (0), it indicates that the KeepAlive timer has not been established with the peer, or, the value of jnxBgpM2PeerKeepAliveConfigured is zero (0). This value is only defined when the peering session is in the Established state.')
jnxBgpM2PeerCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 5))
jnxBgpM2PeerCapsAnnouncedTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 5, 1), )
if mibBuilder.loadTexts: jnxBgpM2PeerCapsAnnouncedTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCapsAnnouncedTable.setDescription('This table contains the capabilities that are supported for a given peer.')
jnxBgpM2PeerCapsAnnouncedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 5, 1, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerCapAnnouncedCode"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerCapAnnouncedIndex"))
if mibBuilder.loadTexts: jnxBgpM2PeerCapsAnnouncedEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCapsAnnouncedEntry.setDescription('These entries are keyed by a BGP-4 peer remote address and the BGP Capability Code')
jnxBgpM2PeerCapAnnouncedCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerCapAnnouncedCode.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCapAnnouncedCode.setDescription('The BGP Capability Advertisement Capability Code.')
jnxBgpM2PeerCapAnnouncedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 5, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerCapAnnouncedIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCapAnnouncedIndex.setDescription('Multiple instances of a given capability may be sent bgp a BGP speaker. This variable is used to index them.')
jnxBgpM2PeerCapAnnouncedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerCapAnnouncedValue.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCapAnnouncedValue.setDescription('The value of the announced capability.')
jnxBgpM2PeerCapsReceivedTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 5, 2), )
if mibBuilder.loadTexts: jnxBgpM2PeerCapsReceivedTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCapsReceivedTable.setDescription('This table contains the capabilities that are supported for a given peer.')
jnxBgpM2PeerCapsReceivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 5, 2, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerCapReceivedCode"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerCapReceivedIndex"))
if mibBuilder.loadTexts: jnxBgpM2PeerCapsReceivedEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCapsReceivedEntry.setDescription('These entries are keyed by a BGP-4 peer remote address and the BGP Capability Code')
jnxBgpM2PeerCapReceivedCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerCapReceivedCode.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCapReceivedCode.setDescription('The BGP Capability Advertisement Capability Code.')
jnxBgpM2PeerCapReceivedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 5, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerCapReceivedIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCapReceivedIndex.setDescription('Multiple instances of a given capability may be sent bgp a BGP speaker. This variable is used to index them.')
jnxBgpM2PeerCapReceivedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerCapReceivedValue.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCapReceivedValue.setDescription('The value of the announced capability.')
jnxBgpM2PeerCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6))
jnxBgpM2PeerCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 1), )
if mibBuilder.loadTexts: jnxBgpM2PeerCountersTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCountersTable.setDescription('The counters associated with a BGP Peer.')
jnxBgpM2PeerCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 1, 1), )
jnxBgpM2PeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerCountersEntry"))
jnxBgpM2PeerCountersEntry.setIndexNames(*jnxBgpM2PeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2PeerCountersEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerCountersEntry.setDescription('Each entry contains counters of message transmissions and FSM transitions for a given BGP Peering session.')
jnxBgpM2PeerInUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerInUpdates.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerInUpdates.setDescription('The number of BGP UPDATE messages received on this connection. This object should be initialized to zero (0) when the connection is established.')
jnxBgpM2PeerOutUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerOutUpdates.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerOutUpdates.setDescription('The number of BGP UPDATE messages transmitted on this connection. This object should be initialized to zero (0) when the connection is established.')
jnxBgpM2PeerInTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerInTotalMessages.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerInTotalMessages.setDescription('The total number of messages received from the remote peer on this connection. This object should be initialized to zero when the connection is established.')
jnxBgpM2PeerOutTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerOutTotalMessages.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerOutTotalMessages.setDescription('The total number of messages transmitted to the remote peer on this connection. This object should be initialized to zero when the connection is established.')
jnxBgpM2PeerFsmEstablishedTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerFsmEstablishedTrans.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerFsmEstablishedTrans.setDescription('The total number of times the BGP FSM transitioned into the established state for this peer.')
jnxBgpM2PrefixCountersTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 2), )
if mibBuilder.loadTexts: jnxBgpM2PrefixCountersTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PrefixCountersTable.setDescription('Additional per-peer, per AFI SAFI counters for prefixes')
jnxBgpM2PrefixCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 2, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PrefixCountersAfi"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PrefixCountersSafi"))
if mibBuilder.loadTexts: jnxBgpM2PrefixCountersEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PrefixCountersEntry.setDescription('Entry containing information about a bgp-peers prefix counters.')
jnxBgpM2PrefixCountersAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PrefixCountersAfi.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PrefixCountersAfi.setDescription('The AFI index of the per-peer, per prefix counters')
jnxBgpM2PrefixCountersSafi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 2, 1, 2), JnxBgpM2Safi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PrefixCountersSafi.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PrefixCountersSafi.setDescription('The SAFI index of the per-peer, per prefix counters')
jnxBgpM2PrefixInPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PrefixInPrefixes.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PrefixInPrefixes.setDescription('The number of prefixes received from a peer and are stored in the Adj-Ribs-In for that peer.')
jnxBgpM2PrefixInPrefixesAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PrefixInPrefixesAccepted.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PrefixInPrefixesAccepted.setDescription('The number of prefixes for a peer that are installed in the Adj-Ribs-In and are eligible to become active in the Loc-Rib.')
jnxBgpM2PrefixInPrefixesRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PrefixInPrefixesRejected.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PrefixInPrefixesRejected.setDescription('The number of prefixes for a peer that are installed in the Adj-Ribs-In and are NOT eligible to become active in the Loc-Rib.')
jnxBgpM2PrefixOutPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PrefixOutPrefixes.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PrefixOutPrefixes.setDescription('The number of prefixes for a peer that are installed in that peers Adj-Ribs-Out.')
jnxBgpM2PrefixInPrefixesActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 6, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PrefixInPrefixesActive.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PrefixInPrefixesActive.setDescription('The number of prefixes for a peer that are installed in the Adj-Ribs-In and are the active route in the Loc-Rib.')
jnxBgpM2PeerExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 7))
jnxBgpM2PeerNonCapExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 7, 1))
jnxBgpM2PeerCapExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 7, 2))
jnxBgpM2PeerRouteReflectionExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 7, 1, 2796))
jnxBgpM2PeerReflectorClientTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 7, 1, 2796, 1), )
if mibBuilder.loadTexts: jnxBgpM2PeerReflectorClientTable.setReference('RFC 2796 - BGP Route Reflection')
if mibBuilder.loadTexts: jnxBgpM2PeerReflectorClientTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerReflectorClientTable.setDescription('Table of route reflection client settings on a per-peer basis.')
jnxBgpM2PeerReflectorClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 7, 1, 2796, 1, 1), )
if mibBuilder.loadTexts: jnxBgpM2PeerReflectorClientEntry.setReference('RFC 2796 - BGP Route Reflection')
jnxBgpM2PeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerReflectorClientEntry"))
jnxBgpM2PeerReflectorClientEntry.setIndexNames(*jnxBgpM2PeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2PeerReflectorClientEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerReflectorClientEntry.setDescription('Entry containing data on a per-peer basis on whether the peer is configured as a route reflector client.')
jnxBgpM2PeerReflectorClient = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 7, 1, 2796, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nonClient", 0), ("client", 1), ("meshedClient", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerReflectorClient.setReference('RFC 2796 - BGP Route Reflection')
if mibBuilder.loadTexts: jnxBgpM2PeerReflectorClient.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerReflectorClient.setDescription('This value indicates whether the given peer is a reflector client of this router, or not. A value of nonClient indicates that this peer is not a reflector client. A value of client indicates that this peer is a reflector client that is not fully meshed with other reflector clients. A value of meshedClient indicates that the peer is a reflector client and is fully meshed with all other reflector clients. This value must be nonClient (0) for BGP external peers.')
jnxBgpM2PeerASConfederationExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 7, 1, 3065))
jnxBgpM2PeerConfedMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 7, 1, 3065, 1), )
if mibBuilder.loadTexts: jnxBgpM2PeerConfedMemberTable.setReference('RFC 3065 - BGP Confederations')
if mibBuilder.loadTexts: jnxBgpM2PeerConfedMemberTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerConfedMemberTable.setDescription('Table of confederation member settings on a per-peer basis.')
jnxBgpM2PeerConfedMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 7, 1, 3065, 1, 1), )
if mibBuilder.loadTexts: jnxBgpM2PeerConfedMemberEntry.setReference('RFC 3065 - BGP Confederations')
jnxBgpM2PeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerConfedMemberEntry"))
jnxBgpM2PeerConfedMemberEntry.setIndexNames(*jnxBgpM2PeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2PeerConfedMemberEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerConfedMemberEntry.setDescription('Entry containing data on a per-peer basis on whether the peer is configured as a BGP confederation member.')
jnxBgpM2PeerConfedMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 7, 1, 3065, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PeerConfedMember.setReference('RFC 3065 - BGP Confederations')
if mibBuilder.loadTexts: jnxBgpM2PeerConfedMember.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerConfedMember.setDescription('This value indicates whether the given peer is in our confederation or not.')
jnxBgpM2PeerConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8))
jnxBgpM2CfgPeerAdminStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 1), )
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAdminStatusTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAdminStatusTable.setDescription('Table containing rows for administratively starting and stopping peering sessions.')
jnxBgpM2CfgPeerAdminStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 1, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerIndex"))
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAdminStatusEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAdminStatusEntry.setDescription('Entry containing row for administratively starting and stopping peers.')
jnxBgpM2CfgPeerAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAdminStatus.setDescription('This object allows the Manual Stop and Manual Start events to be sent to an activated peering session.')
jnxBgpM2CfgPeerNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerNextIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerNextIndex.setDescription('This object contains the next appropriate value to use as an index for creation of a row instance in in the jnxBgpM2CfgPeerTable. If the number of available entries in the jnxBgpM2CfgPeerTable is exhausted, a retrieval value of this object instance will return 0. A value of 0 may also be returned if the agent is otherwise incapable of jnxBgpM2CfgPeerTable row creation at the time of jnxBgpM2CfgPeerNextIndex retrieval.')
jnxBgpM2CfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3), )
if mibBuilder.loadTexts: jnxBgpM2CfgPeerTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerTable.setDescription('BGP configuration peer table. This table allows the configuration of the parameters for a session with a BGP peer. +++wayne provide description of how config should be done for a peer per table.')
jnxBgpM2CfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerIndex"))
if mibBuilder.loadTexts: jnxBgpM2CfgPeerEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerEntry.setDescription('Entry containing information set up by a management entity to configure a connection with a BGP peer.')
jnxBgpM2CfgPeerConfiguredVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConfiguredVersion.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConfiguredVersion.setDescription('The configured version to originally start with this peer. The BGP speaker may permit negotiation to a lower version number of the protocol depending on the set value of jnxBgpM2CfgAllowVersionNegotiation.')
jnxBgpM2CfgAllowVersionNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgAllowVersionNegotiation.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgAllowVersionNegotiation.setDescription('If set to true, during session establishment with this peer, negotiation to a version lower than that specified in jnxBgpM2CfgPeerConfiguredVersion will be allowed.')
jnxBgpM2CfgPeerLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerLocalAddrType.setDescription('The address family of the speakers of this BGP session.')
jnxBgpM2CfgPeerLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerLocalAddr.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerLocalAddr.setDescription('The address of the local end of the peering session.')
jnxBgpM2CfgPeerLocalAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 5), InetAutonomousSystemNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerLocalAs.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerLocalAs.setDescription('Autonomous system represented to peer on peering session initialization. Some implementations of BGP can represent themselves as multiple ASes. These implementations can set this to an alternate autonomous system. If this object is set to zero (0) at the point this row instance is set to active, then the implementation will initialize this session representing itself as the value of jnxBgpM2CfgLocalAs.')
jnxBgpM2CfgPeerRemoteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 6), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRemoteAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRemoteAddrType.setDescription('The address family of the speakers of the remote BGP session.')
jnxBgpM2CfgPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 7), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRemoteAddr.setDescription('The address of the remote end (destination address of peer) for peering session.')
jnxBgpM2CfgPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRemotePort.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRemotePort.setDescription('This is the remote port for the transport connection between the BGP peers. In the case of a transport for which the notion of port is irrelevant, the value of -1 can be defaulted or set.')
jnxBgpM2CfgPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 9), InetAutonomousSystemNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRemoteAs.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRemoteAs.setDescription('Autonomous system number of the remote peer.')
jnxBgpM2CfgPeerEntryStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerEntryStorageType.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerEntryStorageType.setDescription('This object type specifies the intended storage type for the jnxBgpM2CfgPeerEntry row instance.')
jnxBgpM2CfgPeerError = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("notActivated", 1), ("errDuplicatePeeringSession", 2), ("activated", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerError.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerError.setDescription('This value indicates the current error status of the row denoting the configured error status. If this row is still under creation (has not been activated jnxBgpM2CfgPeerRowEntryStatus), then this instance will be set to not-activated (1). At the point that the row is activated, jnxBgpM2CfgPeerError will reflect the error status of the row data itself. If there is another session already activated with the same local and remote addresses as denoted by {jnxBgpM2CfgPeerLocalAddrType, jnxBgpM2CfgPeerLocalAddr, jnxBgpM2CfgPeerRemoteAddr, jnxBgpM2CfgPeerRemotePort}, then the value of this will be set to err-duplicate-peering-session (2). If this row is associated with a peer session whose initialization has been attempted, the value will be set to activated (3) (and, jnxBgpM2PeerCfgPeerEntry will be set to the row instance of the entry in the jnxBgpM2PeerTable which reflects the state of the peering session). Note that this object only reflects the error as a function of the attempted activation of this row as containing data for a bgp peering session. The actual state of the session at the point of any protocol exchange or session state machine initiation is reflected in the jnxBgpM2PeerTable row instance (as reflected through jnxBgpM2CfgPeerPeerEntry) associated with this row instance.')
jnxBgpM2CfgPeerBgpPeerEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 12), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerBgpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerBgpPeerEntry.setDescription('Upon activation of the session data contained in this row instance, this object points to an instance of a row within the jnxBgpM2PeerTable reflecting the session in its initializing or operational state. Retrieval of this column instance will always yield a value of {0.0} unless the session has successfully been activated (via jnxBgpM2CfgPeerRowEntryStatus). Such row instances will always have a value of jnxBgpM2CfgPeerError which is activated (3).')
jnxBgpM2CfgPeerRowEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRowEntryStatus.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRowEntryStatus.setDescription('This object type is used to control creation, activation, and deletion of this row instance.')
jnxBgpM2CfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxBgpM2CfgPeerIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerIndex.setDescription('Uniquely identifies an instance of a peer row, as an element of configuration.')
jnxBgpM2CfgPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halted", 1), ("running", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerStatus.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerStatus.setDescription('This specifies the state of the peering session upon activation. If disabled, the FSM is in the halted state and no Automatic Start events are generated. If enabled, the FSM is in the running state and Automatic Start events may be generated.')
jnxBgpM2CfgPeerRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 3, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRoutingInstance.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerRoutingInstance.setDescription('Routing instance index.')
jnxBgpM2CfgPeerAuthTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 4), )
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthTable.setDescription('Table contain per peer configuration for BGP Authentication.')
jnxBgpM2CfgPeerAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 4, 1), )
jnxBgpM2CfgPeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerAuthEntry"))
jnxBgpM2CfgPeerAuthEntry.setIndexNames(*jnxBgpM2CfgPeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthEntry.setDescription("Entry containing information about a peer's BGP Authentication configuration.")
jnxBgpM2CfgPeerAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthEnabled.setDescription('This value is true if BGP Authentication is enabled for this peer. This is the authentication mechanism documented in the base BGP specification, not the MD5 session protection mechanism.')
jnxBgpM2CfgPeerAuthCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthCode.setReference('draft-ietf-idr-bgp4-17.txt, Sec. 4.1.a')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthCode.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthCode.setDescription('The authentication code for the BGP Authentication mechanism.')
jnxBgpM2CfgPeerAuthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 252))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthValue.setReference('draft-ietf-idr-bgp4-17.txt, Sec. 4.1.a')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthValue.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerAuthValue.setDescription('The authentication payload for the BGP authentication mechanism. This value has semantic meaning within the context of the authentication code.')
jnxBgpM2CfgPeerTimersTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 5), )
if mibBuilder.loadTexts: jnxBgpM2CfgPeerTimersTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerTimersTable.setDescription('Table for configuration of per-peer timers.')
jnxBgpM2CfgPeerTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 5, 1), )
jnxBgpM2CfgPeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerTimersEntry"))
jnxBgpM2CfgPeerTimersEntry.setIndexNames(*jnxBgpM2CfgPeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2CfgPeerTimersEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerTimersEntry.setDescription('Entry containing per-peer timer configuration.')
jnxBgpM2CfgPeerConnectRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConnectRetryInterval.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConnectRetryInterval.setDescription('Time interval in seconds for the ConnectRetry timer. The suggested value for this timer is 120 seconds.')
jnxBgpM2CfgPeerHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), )).clone(90)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerHoldTimeConfigured.setReference('draft-ietf-idr-bgp4-17.txt, Appendix 6.4')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerHoldTimeConfigured.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerHoldTimeConfigured.setDescription('Time interval in seconds for the Hold Time configured for this BGP speaker with this peer. This value is placed in an OPEN message sent to this peer by this BGP speaker, and is compared with the Hold Time field in an OPEN message received from the peer when determining the Hold Time (jnxBgpM2PeerHoldTime) with the peer. This value must not be less than three seconds if it is not zero (0) in which case the Hold Time is NOT to be established with the peer. The suggested value for this timer is 90 seconds.')
jnxBgpM2CfgPeerKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 21845), )).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerKeepAliveConfigured.setReference('draft-ietf-idr-bgp4-17.txt, Appendix 6.4')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerKeepAliveConfigured.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerKeepAliveConfigured.setDescription('Time interval in seconds for the KeepAlive timer configured for this BGP speaker with this peer. The value of this object will only determine the KEEPALIVE messages frequency relative to the value specified in jnxBgpM2PeerHoldTimeConfigured; the actual time interval for the KEEPALIVE messages is indicated by jnxBgpM2PeerKeepAlive. A reasonable maximum value for this timer would be configured to be one third of that of jnxBgpM2PeerHoldTimeConfigured. If the value of this object is zero (0), no periodical KEEPALIVE messages are sent to the peer after the BGP connection has been established. The suggested value for this timer is 30 seconds.')
jnxBgpM2CfgPeerMinASOrigInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerMinASOrigInterval.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerMinASOrigInterval.setDescription('Time interval in seconds for the MinASOriginationInterval timer. The suggested value for this timer is 15 seconds.')
jnxBgpM2CfgPeerMinRouteAdverInter = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerMinRouteAdverInter.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerMinRouteAdverInter.setDescription('Time interval in seconds for the MinRouteAdvertisementInterval timer. The suggested value for this timer is 30 seconds.')
jnxBgpM2CfgPeerExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 6))
jnxBgpM2CfgPeerNonCapExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 6, 1))
jnxBgpM2CfgPeerCapExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 6, 2))
jnxBgpM2CfgPeerRouteReflectionExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 6, 1, 2796))
jnxBgpM2CfgPeerReflectorClientTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 6, 1, 2796, 1), )
if mibBuilder.loadTexts: jnxBgpM2CfgPeerReflectorClientTable.setReference('RFC 2796 - BGP Route Reflection')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerReflectorClientTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerReflectorClientTable.setDescription('Table of route reflection client settings on a per-peer basis.')
jnxBgpM2CfgPeerReflectorClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 6, 1, 2796, 1, 1), )
if mibBuilder.loadTexts: jnxBgpM2CfgPeerReflectorClientEntry.setReference('RFC 2796 - BGP Route Reflection')
jnxBgpM2CfgPeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerReflectorClientEntry"))
jnxBgpM2CfgPeerReflectorClientEntry.setIndexNames(*jnxBgpM2CfgPeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2CfgPeerReflectorClientEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerReflectorClientEntry.setDescription('Entry containing data on a per-peer basis on whether the peer is configured as a route reflector client.')
jnxBgpM2CfgPeerReflectorClient = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 6, 1, 2796, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nonClient", 0), ("client", 1), ("meshedClient", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerReflectorClient.setReference('RFC 2796 - BGP Route Reflection')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerReflectorClient.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerReflectorClient.setDescription('This value indicates whether the given peer is a reflector client of this router, or not. A value of nonClient indicates that this peer is not a reflector client. A value of client indicates that this peer is a reflector client that is not fully meshed with other reflector clients. A value of meshedClient indicates that the peer is a reflector client and is fully meshed with all other reflector clients. This value must be nonClient (0) for BGP external peers.')
jnxBgpM2CfgPeerASConfederationExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 6, 1, 3065))
jnxBgpM2CfgPeerConfedMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 6, 1, 3065, 1), )
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConfedMemberTable.setReference('RFC 3065 - BGP Confederations')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConfedMemberTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConfedMemberTable.setDescription('Table of confederation member settings on a per-peer basis.')
jnxBgpM2CfgPeerConfedMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 6, 1, 3065, 1, 1), )
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConfedMemberEntry.setReference('RFC 3065 - BGP Confederations')
jnxBgpM2CfgPeerEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerConfedMemberEntry"))
jnxBgpM2CfgPeerConfedMemberEntry.setIndexNames(*jnxBgpM2CfgPeerEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConfedMemberEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConfedMemberEntry.setDescription('Entry containing data on a per-peer basis on whether the peer is configured as a BGP confederation member.')
jnxBgpM2CfgPeerConfedMember = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 2, 8, 6, 1, 3065, 1, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConfedMember.setReference('RFC 3065 - BGP Confederations')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConfedMember.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CfgPeerConfedMember.setDescription('This value indicates whether the given peer is in our confederation or not.')
jnxBgpM2Rib = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3))
jnxBgpM2NlriTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1), )
if mibBuilder.loadTexts: jnxBgpM2NlriTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2NlriTable.setDescription('The BGP-4 Received Path Attribute Table contains information about paths to destination networks received from all BGP4 peers. Collectively, this represents the Adj-Ribs-In. The route where jnxBgpM2NlriBest is TRUE represents, for this NLRI, the route that is installed in the LocRib from the Adj-Ribs-In.')
jnxBgpM2NlriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriAfi"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriSafi"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriPrefix"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriPrefixLen"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriIndex"))
if mibBuilder.loadTexts: jnxBgpM2NlriEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2NlriEntry.setDescription('Information about a path to a network.')
jnxBgpM2NlriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2NlriIndex.setReference('RFC 3107 - Carrying Label Information in BGP-4')
if mibBuilder.loadTexts: jnxBgpM2NlriIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2NlriIndex.setDescription('This index allows for multiple instances of a base prefix for a certain AFI SAFI from a given peer. This is currently useful for two things: 1. Allowing for a peer in future implementations to send more than a single route instance. 2. Allow for extensions which extend the NLRI field to send the same prefix while utilizing other extension specific information. An example of this is RFC 3107 - Carrying MPLS labels in BGP.')
jnxBgpM2NlriAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2NlriAfi.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2NlriAfi.setDescription('The address family of the prefix for this NLRI.')
jnxBgpM2NlriSafi = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1, 1, 3), JnxBgpM2Safi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2NlriSafi.setReference('RFC 2858 - Multiprotocol Extensions for BGP-4')
if mibBuilder.loadTexts: jnxBgpM2NlriSafi.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2NlriSafi.setDescription('The subsequent address family of the prefix for this NLRI')
jnxBgpM2NlriPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2NlriPrefix.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2NlriPrefix.setDescription('An IP address prefix in the Network Layer Reachability Information field. This object is an IP address containing the prefix with length specified by jnxBgpM2PathAttrAddrPrefixLen. Any bits beyond the length specified by jnxBgpM2PathAttrAddrPrefixLen are zeroed.')
jnxBgpM2NlriPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1, 1, 5), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2NlriPrefixLen.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2NlriPrefixLen.setDescription('Length in bits of the address prefix in the Network Layer Reachability Information field.')
jnxBgpM2NlriBest = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2NlriBest.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2NlriBest.setDescription('An indication of whether or not this route was chosen as the best BGP4 route.')
jnxBgpM2NlriCalcLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2NlriCalcLocalPref.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2NlriCalcLocalPref.setDescription('The degree of preference calculated by the receiving BGP4 speaker for an advertised route.')
jnxBgpM2PathAttrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrIndex.setDescription('This value is a unique index for the per-NLRI entry in the jnxBgpM2PeerAttrTable. It is assigned by the agent at the point of creation of the jnxBgpM2PeerAttrTable row entry. While its value is guaranteed to be unique at any time, it is otherwise opaque to the management application with respect to its value or the contiguity of jnxBgpM2PeerAttrIndex row instance values across rows of the jnxBgpM2PeerAttrTable. It is used to provide an index structure for other tables whose data is logically per-peer, per-NLRI.')
jnxBgpM2NlriOpaqueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("bgpMplsLabelStack", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2NlriOpaqueType.setReference('RFC 3107 - Carrying Label Information in BGP-4 draft-ietf-mpls-lsr-mib-08.txt')
if mibBuilder.loadTexts: jnxBgpM2NlriOpaqueType.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2NlriOpaqueType.setDescription('This object enumerates the type of the row that is pointed to in the table row jnxBgpM2NlriOpaquePointer instance, if jnxBgpM2NlriOpaquePointer is in fact not a zero length. jnxBgpM2NlriOpaqueType is necessary since the data referenced by jnxBgpM2NlriOpaquePointer is opaque to BGP. For example, in the case of RFC 3107, the label stack that is pointed to may occur in the mplsLabelStackTable from the MPLS-LSR-MIB, and the instance value of jnxBgpM2NlriOpaqueType would be bgpMplsLabelStack(1).')
jnxBgpM2NlriOpaquePointer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 1, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2NlriOpaquePointer.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2NlriOpaquePointer.setDescription('Pointer to a row that decomposes the data that is opaque to the BGP MIB but is sent in the NLRI. This RowPointer has zero (0) length data instance if jnxBgpM2NlriOpaqueType is none.')
jnxBgpM2AdjRibsOutTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 2), )
if mibBuilder.loadTexts: jnxBgpM2AdjRibsOutTable.setReference('draft-ietf-idr-bgp4-17.txt, Sec. 3.2')
if mibBuilder.loadTexts: jnxBgpM2AdjRibsOutTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AdjRibsOutTable.setDescription("This table contains on a per-peer basis one or more routes from the jnxBgpM2NlriTable that have been placed in this peer's Adj-Ribs-Out.")
jnxBgpM2AdjRibsOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 2, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriAfi"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriSafi"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriPrefix"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriPrefixLen"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2AdjRibsOutIndex"))
if mibBuilder.loadTexts: jnxBgpM2AdjRibsOutEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AdjRibsOutEntry.setDescription("List of BGP routes that have been placed into a peer's Adj-Ribs-Out.")
jnxBgpM2AdjRibsOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AdjRibsOutIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AdjRibsOutIndex.setDescription('Certain extensions to BGP permit multiple instance of a per afi, per safi prefix to be advertised to a peer. This object allows the enumeration of them.')
jnxBgpM2AdjRibsOutRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 2, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AdjRibsOutRoute.setReference('draft-ietf-idr-bgp4-17.txt, Sec. 9.2')
if mibBuilder.loadTexts: jnxBgpM2AdjRibsOutRoute.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AdjRibsOutRoute.setDescription("This object points to the route in the jnxBgpM2NlriTable that corresponds to the entry in the peer's Adj-Rib-Out. Outgoing route maps are not reflected at this point as those are part of the Update-Send process.")
jnxBgpM2PathAttrCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrCount.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrCount.setDescription('The number of entries in the jnxBgpM2PathAttrTable.')
jnxBgpM2PathAttrTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4), )
if mibBuilder.loadTexts: jnxBgpM2PathAttrTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrTable.setDescription('Provides per advertised network-prefix attribute data, as advertised over a peering session.')
jnxBgpM2PathAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrIndex"))
if mibBuilder.loadTexts: jnxBgpM2PathAttrEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrEntry.setDescription('Each entry contains data about a given network prefix, per-prefix and per-advertising peer.')
jnxBgpM2PathAttrOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrOrigin.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrOrigin.setDescription('The ultimate origin of the path information.')
jnxBgpM2PathAttrNextHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrNextHopAddrType.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrNextHopAddrType.setDescription('The address family of the address for the border router that should be used to access the destination network.')
jnxBgpM2PathAttrNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrNextHop.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrNextHop.setDescription('The address of the border router that should be used to access the destination network. This address is the nexthop address received in the UPDATE packet. The address family of this object will be the same as that of the prefix in this row. Note that for RFC2545 style double nexthops, this object will always contain the global scope nexthop. jnxBgpM2LinkLocalNextHopTable will contain the linklocal scope nexthop. In the case that the mechanism documented in draft-kato-bgp-ipv6-link-local-00.txt is used and only a link local nexthop has been sent, , jnxBgpM2LinkLocalNextHopPresent will be false and jnxBgpM2PathAttrNextHop will contain the link local nexthop.')
jnxBgpM2PathAttrMedPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrMedPresent.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrMedPresent.setDescription('Whether or not the MED value is present. If it is not present, the jnxBgpM2PathAttrMed object has no useful value and should be set to 0.')
jnxBgpM2PathAttrMed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrMed.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrMed.setDescription('This metric is used to discriminate between multiple exit points to an adjacent autonomous system.')
jnxBgpM2PathAttrLocalPrefPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrLocalPrefPresent.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrLocalPrefPresent.setDescription('Whether or not the LocalPref value is present. If it is not present, the jnxBgpM2PathAttrLocalPref object has no useful value and should be set to 0.')
jnxBgpM2PathAttrLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrLocalPref.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrLocalPref.setDescription('The originating BGP4 speakers degree of preference for an advertised route.')
jnxBgpM2PathAttrAtomicAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atomicAggregatePresent", 1), ("atomicAggregateMissing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrAtomicAggregate.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrAtomicAggregate.setDescription('When this object is set to atomicAggregatePresent, the ATOMIC_AGGREGATE Path Attribute is present and indicates that the NLRI MUST NOT be made more specific.')
jnxBgpM2PathAttrAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 9), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrAggregatorAS.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrAggregatorAS.setDescription('The AS number of the last BGP4 speaker that performed route aggregation. A value of zero (0) indicates the absence of this attribute. Note propagation of AS of zero is illegal in the Internet.')
jnxBgpM2PathAttrAggregatorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 10), JnxBgpM2Identifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrAggregatorAddr.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrAggregatorAddr.setDescription('The IP address of the last BGP4 speaker that performed route aggregation. A value of 0.0.0.0 indicates the absence of this attribute.')
jnxBgpM2AsPathCalcLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPathCalcLength.setReference('draft-ietf-idr-bgp4-17.txt, Sec. 9.1.2.2.a')
if mibBuilder.loadTexts: jnxBgpM2AsPathCalcLength.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPathCalcLength.setDescription('This value represents the calculated length of the AS Path according to the rules of the BGP specification. This value is used in route selection.')
jnxBgpM2AsPathString = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPathString.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPathString.setDescription('This is a string depicting the autonomous system path to this network which was received from the peer which advertised it. The format of the string is implementation-dependent, and should be designed for operator readability.')
jnxBgpM2AsPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 4, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPathIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPathIndex.setDescription('This value is a unique index for the decomposed AS Path in the jnxBgpM2AsPathTable. It is assigned by the agent at the point of creation of the jnxBgpM2AsPathTable row entry. While its value is guaranteed to be unique at any time, it is otherwise opaque to the management application with respect to its value or the contiguity of jnxBgpM2AsPathIndex row instance values across rows of the jnxBgpM2AsPathTable.')
jnxBgpM2AsPath4byteTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 5), )
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteTable.setReference('draft-ietf-idr-as4bytes-04.txt - BGP support for four-octet AS number space')
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteTable.setDescription('This table is present for BGP speakers that support the AS 4byte specification and are functioning as a router between 2-byte and 4-byte AS space.')
jnxBgpM2AsPath4byteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 5, 1), )
jnxBgpM2PathAttrEntry.registerAugmentions(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPath4byteEntry"))
jnxBgpM2AsPath4byteEntry.setIndexNames(*jnxBgpM2PathAttrEntry.getIndexNames())
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteEntry.setDescription("Each row contains the information for the AS 4-byte extension's NEW_AS_PATH and NEW_AGGREGATOR attributes.")
jnxBgpM2AsPath4bytePathPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPath4bytePathPresent.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPath4bytePathPresent.setDescription('This value may only be true if this BGP Speaker is functioning as a router between ASs that are in 2-byte and 4-byte AS space. If this value is true, then the NEW_AS_PATH attributes are present and the 4-byte versions of the appropriate path attributes are in this row. If this value is false, then the following values will be present in the row: jnxBgpM2PathAttrAggregatorAS - zero (0). jnxBgpM2AsPathCalcLength - zero (0). jnxBgpM2AsPathString - zero (0) length string. jnxBgpM2AsPathIndex - zero (0).')
jnxBgpM2AsPath4byteAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 5, 1, 2), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteAggregatorAS.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteAggregatorAS.setDescription('The NEW_AGGREGATOR AS number of the last BGP4 speaker that performed route aggregation. A value of zero (0) indicates the absence of this attribute. Note propagation of AS of zero is illegal in the Internet.')
jnxBgpM2AsPath4byteCalcLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteCalcLength.setReference('draft-ietf-idr-bgp4-17.txt, Sec. 9.1.2.2.a')
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteCalcLength.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteCalcLength.setDescription('This value represents the calculated length of the NEW_AS_PATH according to the rules of the BGP specification. This value is used in route selection.')
jnxBgpM2AsPath4byteString = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 5, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteString.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteString.setDescription('This is a string depicting the autonomous system path to this network which was received from the peer which advertised it. The format of the string is implementation-dependent, and should be designed for operator readability.')
jnxBgpM2AsPath4byteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPath4byteIndex.setDescription('This value is a unique index for the decomposed AS Path in the jnxBgpM2AsPathTable. It is assigned by the agent at the point of creation of the jnxBgpM2AsPathTable row entry. While its value is guaranteed to be unique at any time, it is otherwise opaque to the management application with respect to its value or the contiguity of jnxBgpM2AsPathIndex row instance values across rows of the jnxBgpM2AsPathTable. ')
jnxBgpM2AsPathTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 6), )
if mibBuilder.loadTexts: jnxBgpM2AsPathTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPathTable.setDescription('The BGP-4 Path Attribute AS Path Table contains the per network path (NLRI) AS PATH data received from the advertising BGP peer.')
jnxBgpM2AsPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 6, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathSegmentIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathElementIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathElementValue"))
if mibBuilder.loadTexts: jnxBgpM2AsPathEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPathEntry.setDescription('Information about an AS path provided with a path to a network.')
jnxBgpM2AsPathSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPathSegmentIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPathSegmentIndex.setDescription('A per-AS path segment index. This will index a set of autonomous systems in an AS path which are part of the same sequence or set (as determined by the row value of jnxBgpM2AsPathType, which should be the same value for each jnxBgpM2AsPathTable entry indexed by the same (jnxBgpM2PathAttrIndex, jnxBgpM2AsPathIndex) pair).')
jnxBgpM2AsPathElementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPathElementIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPathElementIndex.setDescription('A per-AS element index. This will index a particular AS within a sequence or set of autonomous systems in an AS path.')
jnxBgpM2AsPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("asSet", 1), ("asSequence", 2), ("confedSequence", 3), ("confedSet", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPathType.setReference('draft-ietf-idr-bgp4-16 RFC 3065 - BGP AS Confederations')
if mibBuilder.loadTexts: jnxBgpM2AsPathType.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPathType.setDescription('The type of sequence in which this asPath was advertised as an attribute. Note that all asPath row instances for a given (jnxBgpM2PathAttrIndex, jnxBgpM2AsPathIndex) index pair will have their jnxBgpM2AsPathType set to the same value. The values for jnxBgpM2AsPathType are interpreted as defined in the base BGP document and the BGP AS Confederations document.')
jnxBgpM2AsPathElementValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 6, 1, 4), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2AsPathElementValue.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPathElementValue.setDescription('An AS value for an AS the related NLRI traversed in the propagation of its advertisement. This value is to be interpreted in the context of the sequence implied by jnxBgpM2AsPathIndex and jnxBgpM2AsPathType (and, in sequence of the other table rows with the same value of jnxBgpM2PathAttrIndex and jnxBgpM2AsPathIndex).')
jnxBgpM2PathAttrUnknownTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 7), )
if mibBuilder.loadTexts: jnxBgpM2PathAttrUnknownTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrUnknownTable.setDescription('The BGP-4 Path Attribute Unknown Table contains the per network path (NLRI) data on the path attributes advertised with a route but not known to the local BGP implementation or not otherwise capable of being returned from this agent. The absence of row data for a given index value for jnxBgpM2PathAttrIndex indicates a lack of such unknown attribute information for the indicated network path (as indexed by that jnxBgpM2PathAttrIndex value in the jnxBgpM2PathAttrTable).')
jnxBgpM2PathAttrUnknownEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 7, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrUnknownIndex"))
if mibBuilder.loadTexts: jnxBgpM2PathAttrUnknownEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrUnknownEntry.setDescription('Information about an unknown attribute provided with a path to a network.')
jnxBgpM2PathAttrUnknownIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrUnknownIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrUnknownIndex.setDescription('An integer index for a row in this table.')
jnxBgpM2PathAttrUnknownType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrUnknownType.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrUnknownType.setDescription('The attribute type advertised with this unknown attribute by the peer.')
jnxBgpM2PathAttrUnknownValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4070))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrUnknownValue.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrUnknownValue.setDescription('Value of path attribute not understood by the base BGP-4 document. Octets beyond the maximum size, if any, are not recorded by this row object. ')
jnxBgpM2PathAttrExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8))
jnxBgpM2PathAttrNonCapExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1))
jnxBgpM2PathAttrCapExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 2))
jnxBgpM2PathAttrRouteReflectionExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2796))
jnxBgpM2PathAttrOriginatorIdTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2796, 1), )
if mibBuilder.loadTexts: jnxBgpM2PathAttrOriginatorIdTable.setReference('RFC 2796 - BGP Route Reflection')
if mibBuilder.loadTexts: jnxBgpM2PathAttrOriginatorIdTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrOriginatorIdTable.setDescription('Per prefix data pertinent to advertisement of a network prefix through an originator.')
jnxBgpM2PathAttrOriginatorIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2796, 1, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrIndex"))
if mibBuilder.loadTexts: jnxBgpM2PathAttrOriginatorIdEntry.setReference('RFC 2796 - BGP Route Reflection')
if mibBuilder.loadTexts: jnxBgpM2PathAttrOriginatorIdEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrOriginatorIdEntry.setDescription('Each entry contains data pertinent to a network prefix as received through its originating BGP route reflector.')
jnxBgpM2PathAttrOriginatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2796, 1, 1, 1), JnxBgpM2Identifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrOriginatorId.setReference('This attribute is defined in [RFC2796].')
if mibBuilder.loadTexts: jnxBgpM2PathAttrOriginatorId.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrOriginatorId.setDescription('The Originator-ID identifying the router that initially advertised this destination to a Route Reflector. A value of 0.0.0.0 indicates the absence of this attribute.')
jnxBgpM2PathAttrClusterTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2796, 2), )
if mibBuilder.loadTexts: jnxBgpM2PathAttrClusterTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrClusterTable.setDescription('The BGP-4 Path Attribute Cluster Table contains the per network path (NLRI) data on the reflection path which a route has traversed. The absence of row data for a given index value for jnxBgpM2PathAttrIndex indicates a lack of this attribute information for the indicated network path (as indexed by that jnxBgpM2PathAttrIndex value in the jnxBgpM2PathAttrTable).')
jnxBgpM2PathAttrClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2796, 2, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrClusterIndex"))
if mibBuilder.loadTexts: jnxBgpM2PathAttrClusterEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrClusterEntry.setDescription('Information about a cluster traversal provided with a path to a network.')
jnxBgpM2PathAttrClusterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2796, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrClusterIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrClusterIndex.setDescription('An integral index for a row in this table.')
jnxBgpM2PathAttrClusterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2796, 2, 1, 2), JnxBgpM2Identifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrClusterValue.setReference('This attribute is defined in [RFC2796].')
if mibBuilder.loadTexts: jnxBgpM2PathAttrClusterValue.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrClusterValue.setDescription('A four octet long value representing a part of the reflection path that the route has passed. Each such four octet long value represents the ID of a cluster that the route has traversed. The sequence of this path as received in the route advertisement will be preserved in the sequence of jnxBgpM2PathAttrClusterTable rows (and the jnxBgpM2PathAttrClusterValues in each row) as returned for a given jnxBgpM2PathAttrIndex value, and the monotonically increasing sequence of jnxBgpM2PathAttrClusterIndex values for that jnxBgpM2PathAttrIndex.')
jnxBgpM2PathAttrCommunityExts = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 1997))
jnxBgpM2PathAttrCommTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 1997, 1), )
if mibBuilder.loadTexts: jnxBgpM2PathAttrCommTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrCommTable.setDescription('The BGP-4 Path Attribute Community Table contains the per network path (NLRI) data on the community membership advertised with a route. The absence of row data for a given index value for jnxBgpM2PathAttrIndex indicates a lack of this attribute information for the indicated network path (as indexed by that jnxBgpM2PathAttrIndex value in the jnxBgpM2PathAttrTable).')
jnxBgpM2PathAttrCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 1997, 1, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrCommIndex"))
if mibBuilder.loadTexts: jnxBgpM2PathAttrCommEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrCommEntry.setDescription('Information about a community association provided with a path to a network.')
jnxBgpM2PathAttrCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 1997, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrCommIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrCommIndex.setDescription('An integer index for a row in this table.')
jnxBgpM2PathAttrCommValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 1997, 1, 1, 2), JnxBgpM2Community()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrCommValue.setReference('RFC 1997 - BGP Communities Attribute')
if mibBuilder.loadTexts: jnxBgpM2PathAttrCommValue.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrCommValue.setDescription('A value representing a community. There are certain 4-octet long values which could be returned in this columnar row data that carry additional semantics.')
jnxBgpM2PathAttrExtCommTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 65001), )
if mibBuilder.loadTexts: jnxBgpM2PathAttrExtCommTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrExtCommTable.setDescription('The BGP-4 Path Attribute Community Table contains the per network path (NLRI) data on the extended community membership advertised with a route. The absence of row data for a given index value for jnxBgpM2PathAttrIndex indicates a lack of this attribute information for the indicated network path (as indexed by that jnxBgpM2PathAttrIndex value in the jnxBgpM2PathAttrTable). XXX JMH - can not assign the OID until an RFC is published.')
jnxBgpM2PathAttrExtCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 65001, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrIndex"), (0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrExtCommIndex"))
if mibBuilder.loadTexts: jnxBgpM2PathAttrExtCommEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrExtCommEntry.setDescription('Information about an extended community association provided with a path to a network.')
jnxBgpM2PathAttrExtCommIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 65001, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrExtCommIndex.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrExtCommIndex.setDescription('An integral index for a row in this table.')
jnxBgpM2PathAttrExtCommValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 65001, 1, 2), JnxBgpM2ExtendedCommunity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2PathAttrExtCommValue.setReference('BGP-EXTCOMM - BGP Extended Communities Attribute')
if mibBuilder.loadTexts: jnxBgpM2PathAttrExtCommValue.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttrExtCommValue.setDescription('A value representing an extended community which was received with the route implied by the jnxBgpM2PathAttr Index value of this row data. There are certain 8-octet long values which could be returned in this columnar row data that carry additional semantics.')
jnxBgpM2LinkLocalNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2545), )
if mibBuilder.loadTexts: jnxBgpM2LinkLocalNextHopTable.setReference('RFC 2545 - Use of BGP-4 Multiprotocol Extensions for IPv6 Inter-Domain Routing')
if mibBuilder.loadTexts: jnxBgpM2LinkLocalNextHopTable.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2LinkLocalNextHopTable.setDescription('Table of link local nexthops as sent by RFC 2545 for IPv6 BGP Speakers.')
jnxBgpM2LinkLocalNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2545, 1), ).setIndexNames((0, "BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrIndex"))
if mibBuilder.loadTexts: jnxBgpM2LinkLocalNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2LinkLocalNextHopEntry.setDescription('Entry containing the link-local nexthops as sent by a BGP speaker running RFC 2545 extensions for double-nexthops.')
jnxBgpM2LinkLocalNextHopPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2545, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2LinkLocalNextHopPresent.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2LinkLocalNextHopPresent.setDescription('This value is TRUE if and only if the BGP speaker is receiving IPv6 NLRI using the RFC 2545 double nexthop convention and it has received a link local scope nexthop in addition to the global scope nexthop.')
jnxBgpM2LinkLocalNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 3, 8, 1, 2545, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxBgpM2LinkLocalNextHop.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2LinkLocalNextHop.setDescription('This value contains an IPv6 link local address of InetAddressType of type ipv6z. This value is only present if jnxBgpM2LinkLocalNextHopPresent is true.')
jnxBgpM2Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4))
jnxBgpM2MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 1))
jnxBgpM2MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2))
jnxBgpM2MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 1, 1)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2TimersGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CountersGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CapabilitiesGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2As4byteGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2BaseGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2ErrorsGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttributesGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2MIBNotificationsGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AuthenticationGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CommunitiesGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2ExtCommunitiesGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2RouteReflectionGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsConfederationGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerConfigurationGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerAuthConfigurationGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRouteReflectorCfgGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerAsConfederationCfgGroup"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2Rfc2545Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2MIBCompliance = jnxBgpM2MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2MIBCompliance.setDescription('The compliance statement for entities which implement the BGP4 mib.')
jnxBgpM2AuthenticationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 1)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2SupportedAuthCode"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2SupportedAuthValue"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerAuthSent"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerAuthSentCode"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerAuthSentValue"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerAuthRcvd"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerAuthRcvdCode"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerAuthRcvdValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2AuthenticationGroup = jnxBgpM2AuthenticationGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AuthenticationGroup.setDescription('Objects associated with BGP authentication.')
jnxBgpM2CommunitiesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 2)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrCommIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrCommValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2CommunitiesGroup = jnxBgpM2CommunitiesGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CommunitiesGroup.setDescription('Objects associated with BGP communities.')
jnxBgpM2ExtCommunitiesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 3)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrExtCommIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrExtCommValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2ExtCommunitiesGroup = jnxBgpM2ExtCommunitiesGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2ExtCommunitiesGroup.setDescription('Objects associated with BGP extended communities.')
jnxBgpM2RouteReflectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 4)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2RouteReflector"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2ClusterId"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerReflectorClient"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrOriginatorId"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrClusterIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrClusterValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2RouteReflectionGroup = jnxBgpM2RouteReflectionGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2RouteReflectionGroup.setDescription('Objects associated with BGP route reflection.')
jnxBgpM2AsConfederationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 5)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2ConfederationRouter"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2ConfederationId"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerConfedMember"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2AsConfederationGroup = jnxBgpM2AsConfederationGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsConfederationGroup.setDescription('Objects associated with BGP confederation membership.')
jnxBgpM2TimersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 6)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerFsmEstablishedTime"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerInUpdatesElapsedTime"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerConnectRetryInterval"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerHoldTimeConfigured"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerKeepAliveConfigured"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerMinASOrigInterval"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerMinRouteAdverInterval"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerHoldTime"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerKeepAlive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2TimersGroup = jnxBgpM2TimersGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2TimersGroup.setDescription('Objects associated with BGP peering timers.')
jnxBgpM2CountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 7)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerInUpdates"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerOutUpdates"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerInTotalMessages"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerOutTotalMessages"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerFsmEstablishedTrans"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PrefixCountersAfi"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PrefixCountersSafi"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PrefixInPrefixes"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PrefixInPrefixesAccepted"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PrefixInPrefixesRejected"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PrefixOutPrefixes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2CountersGroup = jnxBgpM2CountersGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CountersGroup.setDescription('Objects to count discrete events and exchanges on BGP sessions.')
jnxBgpM2CapabilitiesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 8)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CapabilitySupportAvailable"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2SupportedCapabilityCode"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2SupportedCapability"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerCapAnnouncedCode"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerCapAnnouncedIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerCapAnnouncedValue"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerCapReceivedCode"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerCapReceivedIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerCapReceivedValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2CapabilitiesGroup = jnxBgpM2CapabilitiesGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2CapabilitiesGroup.setDescription('Objects to report capabilities as received on BGP sessions.')
jnxBgpM2AsPathGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 9)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathSegmentIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathElementIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathElementValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2AsPathGroup = jnxBgpM2AsPathGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2AsPathGroup.setDescription('Objects to report AS paths received on BGP NLRIs.')
jnxBgpM2As4byteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 10)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsSize"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPath4bytePathPresent"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPath4byteAggregatorAS"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPath4byteCalcLength"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPath4byteString"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPath4byteIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2As4byteGroup = jnxBgpM2As4byteGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2As4byteGroup.setDescription('AS Size objects.')
jnxBgpM2BaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 11)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2LocalAs"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2LocalIdentifier"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2VersionIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2VersionSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2BaseGroup = jnxBgpM2BaseGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2BaseGroup.setDescription('Basic objects in local BGP implementation.')
jnxBgpM2ErrorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 12)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLastErrorReceived"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLastErrorReceivedData"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLastErrorReceivedTime"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLastErrorReceivedText"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLastErrorSent"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLastErrorSentData"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLastErrorSentTime"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLastErrorSentText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2ErrorsGroup = jnxBgpM2ErrorsGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2ErrorsGroup.setDescription('Errors received on BGP peering sessions.')
jnxBgpM2PeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 13)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerIdentifier"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerState"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerStatus"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerConfiguredVersion"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerNegotiatedVersion"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLocalAddrType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLocalAddr"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLocalPort"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerLocalAs"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRemoteAddrType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRemoteAddr"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRemotePort"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRemoteAs"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerRoutingInstance"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PeerIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2PeerGroup = jnxBgpM2PeerGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerGroup.setDescription('Core object types on BGP peering sessions.')
jnxBgpM2PathAttributesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 14)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrCount"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathCalcLength"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathElementValue"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathString"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AsPathType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriAfi"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriBest"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriPrefix"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriPrefixLen"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriSafi"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriOpaqueType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriOpaquePointer"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2NlriCalcLocalPref"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AdjRibsOutIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2AdjRibsOutRoute"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrAggregatorAS"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrAggregatorAddr"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrAtomicAggregate"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrLocalPref"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrLocalPrefPresent"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrMed"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrMedPresent"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrNextHop"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrNextHopAddrType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrOrigin"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrUnknownIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrUnknownType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2PathAttrUnknownValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2PathAttributesGroup = jnxBgpM2PathAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PathAttributesGroup.setDescription('Attributes received on BGP peering sessions.')
jnxBgpM2PeerConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 15)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgBaseScalarStorageType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgLocalAs"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgLocalIdentifier"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerAdminStatus"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerNextIndex"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerConfiguredVersion"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgAllowVersionNegotiation"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerLocalAddrType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerLocalAddr"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerLocalAs"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerRemoteAddrType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerRemoteAddr"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerRemotePort"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerRemoteAs"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerEntryStorageType"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerError"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerBgpPeerEntry"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerRowEntryStatus"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerStatus"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerConnectRetryInterval"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerHoldTimeConfigured"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerKeepAliveConfigured"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerMinASOrigInterval"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerMinRouteAdverInter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2PeerConfigurationGroup = jnxBgpM2PeerConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerConfigurationGroup.setDescription('Configuration objects for BGP peers.')
jnxBgpM2PeerAuthConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 16)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerAuthEnabled"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerAuthCode"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerAuthValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2PeerAuthConfigurationGroup = jnxBgpM2PeerAuthConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerAuthConfigurationGroup.setDescription('Configuration objects for BGP peers that support authentication.')
jnxBgpM2PeerRouteReflectorCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 17)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgRouteReflector"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgClusterId"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerReflectorClient"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2PeerRouteReflectorCfgGroup = jnxBgpM2PeerRouteReflectorCfgGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerRouteReflectorCfgGroup.setDescription('Configuration objects for BGP peers that support route reflection.')
jnxBgpM2PeerAsConfederationCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 18)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgConfederationRouter"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgConfederationId"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2CfgPeerConfedMember"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2PeerAsConfederationCfgGroup = jnxBgpM2PeerAsConfederationCfgGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2PeerAsConfederationCfgGroup.setDescription('Configuration objects for BGP peers that support BGP confederations.')
jnxBgpM2MIBNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 19)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2Established"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2BackwardTransition"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2MIBNotificationsGroup = jnxBgpM2MIBNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2MIBNotificationsGroup.setDescription('This group contains objects for notifications supported by this mib module.')
jnxBgpM2Rfc2545Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 5, 1, 1, 4, 2, 20)).setObjects(("BGP4-V2-MIB-JUNIPER", "jnxBgpM2LinkLocalNextHopPresent"), ("BGP4-V2-MIB-JUNIPER", "jnxBgpM2LinkLocalNextHop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxBgpM2Rfc2545Group = jnxBgpM2Rfc2545Group.setStatus('current')
if mibBuilder.loadTexts: jnxBgpM2Rfc2545Group.setDescription('This group is required for peers that support exchanging of IPv6 NLRI per RFC 2545.')
mibBuilder.exportSymbols("BGP4-V2-MIB-JUNIPER", jnxBgpM2SupportedCapabilitiesTable=jnxBgpM2SupportedCapabilitiesTable, jnxBgpM2NlriOpaqueType=jnxBgpM2NlriOpaqueType, jnxBgpM2LocalAs=jnxBgpM2LocalAs, jnxBgpM2LinkLocalNextHop=jnxBgpM2LinkLocalNextHop, jnxBgpM2PathAttrMedPresent=jnxBgpM2PathAttrMedPresent, jnxBgpM2PeerHoldTimeConfigured=jnxBgpM2PeerHoldTimeConfigured, jnxBgpM2PathAttrMed=jnxBgpM2PathAttrMed, jnxBgpM2PeerCapsReceivedEntry=jnxBgpM2PeerCapsReceivedEntry, jnxBgpM2CapabilitySupportAvailable=jnxBgpM2CapabilitySupportAvailable, jnxBgpM2CfgPeerReflectorClient=jnxBgpM2CfgPeerReflectorClient, jnxBgpM2PeerLastErrorReceived=jnxBgpM2PeerLastErrorReceived, jnxBgpM2PeerData=jnxBgpM2PeerData, jnxBgpM2PeerRemotePort=jnxBgpM2PeerRemotePort, jnxBgpM2BackwardTransition=jnxBgpM2BackwardTransition, jnxBgpM2CfgPeerLocalAddr=jnxBgpM2CfgPeerLocalAddr, jnxBgpM2PeerAuthConfigurationGroup=jnxBgpM2PeerAuthConfigurationGroup, jnxBgpM2PeerMinASOrigInterval=jnxBgpM2PeerMinASOrigInterval, jnxBgpM2PeerLastErrorSent=jnxBgpM2PeerLastErrorSent, JnxBgpM2ExtendedCommunity=JnxBgpM2ExtendedCommunity, jnxBgpM2AsPath4byteTable=jnxBgpM2AsPath4byteTable, jnxBgpM2AdjRibsOutEntry=jnxBgpM2AdjRibsOutEntry, jnxBgpM2AsSize=jnxBgpM2AsSize, jnxBgpM2PathAttrEntry=jnxBgpM2PathAttrEntry, jnxBgpM2SupportedCapability=jnxBgpM2SupportedCapability, jnxBgpM2PeerConfiguration=jnxBgpM2PeerConfiguration, jnxBgpM2CfgPeerTable=jnxBgpM2CfgPeerTable, jnxBgpM2PathAttrExtensions=jnxBgpM2PathAttrExtensions, jnxBgpM2PeerConfiguredVersion=jnxBgpM2PeerConfiguredVersion, jnxBgpM2PeerAuthSentValue=jnxBgpM2PeerAuthSentValue, jnxBgpM2CfgBaseScalarStorageType=jnxBgpM2CfgBaseScalarStorageType, jnxBgpM2CfgPeerTimersEntry=jnxBgpM2CfgPeerTimersEntry, jnxBgpM2PathAttrCount=jnxBgpM2PathAttrCount, jnxBgpM2AsPath4byteAggregatorAS=jnxBgpM2AsPath4byteAggregatorAS, jnxBgpM2SupportedAuthTable=jnxBgpM2SupportedAuthTable, jnxBgpM2AsPath4byteString=jnxBgpM2AsPath4byteString, jnxBgpM2MIBGroups=jnxBgpM2MIBGroups, jnxBgpM2PeerCapReceivedCode=jnxBgpM2PeerCapReceivedCode, jnxBgpM2BaseGroup=jnxBgpM2BaseGroup, jnxBgpM2PathAttrClusterTable=jnxBgpM2PathAttrClusterTable, jnxBgpM2PeerConfedMemberEntry=jnxBgpM2PeerConfedMemberEntry, jnxBgpM2PrefixCountersTable=jnxBgpM2PrefixCountersTable, jnxBgpM2CfgPeerAdminStatus=jnxBgpM2CfgPeerAdminStatus, jnxBgpM2CfgPeerStatus=jnxBgpM2CfgPeerStatus, jnxBgpM2ConfederationId=jnxBgpM2ConfederationId, jnxBgpM2NlriAfi=jnxBgpM2NlriAfi, jnxBgpM2BaseScalarCapExts=jnxBgpM2BaseScalarCapExts, jnxBgpM2PeerAuthTable=jnxBgpM2PeerAuthTable, jnxBgpM2PathAttrCommIndex=jnxBgpM2PathAttrCommIndex, jnxBgpM2PeerLastErrorSentTime=jnxBgpM2PeerLastErrorSentTime, jnxBgpM2PeerErrorsEntry=jnxBgpM2PeerErrorsEntry, jnxBgpM2PrefixInPrefixesAccepted=jnxBgpM2PrefixInPrefixesAccepted, jnxBgpM2PathAttrOriginatorIdTable=jnxBgpM2PathAttrOriginatorIdTable, jnxBgpM2SupportedAuthValue=jnxBgpM2SupportedAuthValue, jnxBgpM2LinkLocalNextHopEntry=jnxBgpM2LinkLocalNextHopEntry, jnxBgpM2PeerConfigurationGroup=jnxBgpM2PeerConfigurationGroup, jnxBgpM2CfgPeerMinASOrigInterval=jnxBgpM2CfgPeerMinASOrigInterval, jnxBgpM2BaseScalarExtensions=jnxBgpM2BaseScalarExtensions, jnxBgpM2PathAttrLocalPref=jnxBgpM2PathAttrLocalPref, jnxBgpM2PeerCapReceivedIndex=jnxBgpM2PeerCapReceivedIndex, jnxBgpM2AsPath4byteEntry=jnxBgpM2AsPath4byteEntry, jnxBgpM2Peer=jnxBgpM2Peer, jnxBgpM2PeerAuthRcvd=jnxBgpM2PeerAuthRcvd, jnxBgpM2PeerEventTimesTable=jnxBgpM2PeerEventTimesTable, jnxBgpM2BaseScalarASConfedExts=jnxBgpM2BaseScalarASConfedExts, jnxBgpM2BaseScalarConfiguration=jnxBgpM2BaseScalarConfiguration, jnxBgpM2PathAttrAggregatorAddr=jnxBgpM2PathAttrAggregatorAddr, jnxBgpM2NlriPrefixLen=jnxBgpM2NlriPrefixLen, jnxBgpM2PeerCapsAnnouncedTable=jnxBgpM2PeerCapsAnnouncedTable, jnxBgpM2PeerState=jnxBgpM2PeerState, jnxBgpM2PeerCapabilities=jnxBgpM2PeerCapabilities, jnxBgpM2PeerFsmEstablishedTrans=jnxBgpM2PeerFsmEstablishedTrans, jnxBgpM2RouteReflector=jnxBgpM2RouteReflector, jnxBgpM2CfgPeerLocalAs=jnxBgpM2CfgPeerLocalAs, jnxBgpM2CfgPeerNonCapExts=jnxBgpM2CfgPeerNonCapExts, jnxBgpM2PeerTimers=jnxBgpM2PeerTimers, jnxBgpM2PrefixInPrefixes=jnxBgpM2PrefixInPrefixes, jnxBgpM2AsPath4byteCalcLength=jnxBgpM2AsPath4byteCalcLength, jnxBgpM2PathAttrClusterIndex=jnxBgpM2PathAttrClusterIndex, jnxBgpM2CommunitiesGroup=jnxBgpM2CommunitiesGroup, jnxBgpM2PeerRemoteAddr=jnxBgpM2PeerRemoteAddr, jnxBgpM2PeerConnectRetryInterval=jnxBgpM2PeerConnectRetryInterval, jnxBgpM2VersionIndex=jnxBgpM2VersionIndex, jnxBgpM2CfgPeerRouteReflectionExts=jnxBgpM2CfgPeerRouteReflectionExts, jnxBgpM2AsPathSegmentIndex=jnxBgpM2AsPathSegmentIndex, jnxBgpM2PathAttrOriginatorIdEntry=jnxBgpM2PathAttrOriginatorIdEntry, jnxBgpM2PrefixCountersSafi=jnxBgpM2PrefixCountersSafi, jnxBgpM2PathAttrRouteReflectionExts=jnxBgpM2PathAttrRouteReflectionExts, jnxBgpM2PathAttrUnknownEntry=jnxBgpM2PathAttrUnknownEntry, jnxBgpM2PeerOutUpdates=jnxBgpM2PeerOutUpdates, jnxBgpM2PeerCounters=jnxBgpM2PeerCounters, JnxBgpM2Identifier=JnxBgpM2Identifier, jnxBgpM2PeerCapAnnouncedCode=jnxBgpM2PeerCapAnnouncedCode, jnxBgpM2PathAttrCommValue=jnxBgpM2PathAttrCommValue, jnxBgpM2PeerAuthRcvdValue=jnxBgpM2PeerAuthRcvdValue, jnxBgpM2CfgPeerRoutingInstance=jnxBgpM2CfgPeerRoutingInstance, jnxBgpM2CfgBaseScalarExtensions=jnxBgpM2CfgBaseScalarExtensions, jnxBgpM2PeerFsmEstablishedTime=jnxBgpM2PeerFsmEstablishedTime, jnxBgpM2CfgPeerConfiguredVersion=jnxBgpM2CfgPeerConfiguredVersion, jnxBgpM2SupportedAuthEntry=jnxBgpM2SupportedAuthEntry, jnxBgpM2AsPathElementIndex=jnxBgpM2AsPathElementIndex, jnxBgpM2PathAttrUnknownTable=jnxBgpM2PathAttrUnknownTable, jnxBgpM2CfgPeerNextIndex=jnxBgpM2CfgPeerNextIndex, jnxBgpM2NlriTable=jnxBgpM2NlriTable, jnxBgpM2PathAttrNonCapExts=jnxBgpM2PathAttrNonCapExts, jnxBgpM2PathAttrCommunityExts=jnxBgpM2PathAttrCommunityExts, jnxBgpM2Version=jnxBgpM2Version, jnxBgpM2CfgPeerAuthEntry=jnxBgpM2CfgPeerAuthEntry, jnxBgpM2Rfc2545Group=jnxBgpM2Rfc2545Group, jnxBgpM2AsPathTable=jnxBgpM2AsPathTable, jnxBgpM2PathAttrUnknownType=jnxBgpM2PathAttrUnknownType, jnxBgpM2VersionTable=jnxBgpM2VersionTable, jnxBgpM2CfgPeerAuthValue=jnxBgpM2CfgPeerAuthValue, jnxBgpM2PeerKeepAliveConfigured=jnxBgpM2PeerKeepAliveConfigured, jnxBgpM2PeerCapAnnouncedIndex=jnxBgpM2PeerCapAnnouncedIndex, jnxBgpM2CountersGroup=jnxBgpM2CountersGroup, jnxBgpM2AdjRibsOutTable=jnxBgpM2AdjRibsOutTable, jnxBgpM2CfgPeerRowEntryStatus=jnxBgpM2CfgPeerRowEntryStatus, jnxBgpM2CfgPeerKeepAliveConfigured=jnxBgpM2CfgPeerKeepAliveConfigured, jnxBgpM2CfgPeerConfedMemberEntry=jnxBgpM2CfgPeerConfedMemberEntry, jnxBgpM2PathAttrCommEntry=jnxBgpM2PathAttrCommEntry, jnxBgpM2AsPathEntry=jnxBgpM2AsPathEntry, jnxBgpM2CfgPeerReflectorClientEntry=jnxBgpM2CfgPeerReflectorClientEntry, jnxBgpM2As4byteGroup=jnxBgpM2As4byteGroup, jnxBgpM2CfgPeerRemoteAddr=jnxBgpM2CfgPeerRemoteAddr, jnxBgpM2PeerOutTotalMessages=jnxBgpM2PeerOutTotalMessages, jnxBgpM2NlriOpaquePointer=jnxBgpM2NlriOpaquePointer, jnxBgpM2PathAttrNextHop=jnxBgpM2PathAttrNextHop, jnxBgpM2AsPathElementValue=jnxBgpM2AsPathElementValue, jnxBgpM2Rib=jnxBgpM2Rib, jnxBgpM2PrefixCountersAfi=jnxBgpM2PrefixCountersAfi, jnxBgpM2CfgPeerError=jnxBgpM2CfgPeerError, jnxBgpM2CfgPeerAuthCode=jnxBgpM2CfgPeerAuthCode, jnxBgpM2PeerLocalAddr=jnxBgpM2PeerLocalAddr, jnxBgpM2PeerHoldTime=jnxBgpM2PeerHoldTime, jnxBgpM2PeerAuthRcvdCode=jnxBgpM2PeerAuthRcvdCode, jnxBgpM2CfgClusterId=jnxBgpM2CfgClusterId, jnxBgpM2CfgAllowVersionNegotiation=jnxBgpM2CfgAllowVersionNegotiation, jnxBgpM2CfgLocalIdentifier=jnxBgpM2CfgLocalIdentifier, jnxBgpM2PathAttrExtCommIndex=jnxBgpM2PathAttrExtCommIndex, jnxBgpM2PeerAuthentication=jnxBgpM2PeerAuthentication, jnxBgpM2CfgPeerIndex=jnxBgpM2CfgPeerIndex, jnxBgpM2PeerConfiguredTimersEntry=jnxBgpM2PeerConfiguredTimersEntry, jnxBgpM2CfgPeerAuthTable=jnxBgpM2CfgPeerAuthTable, jnxBgpM2MIBCompliances=jnxBgpM2MIBCompliances, jnxBgpM2CfgBaseScalarReflectorExts=jnxBgpM2CfgBaseScalarReflectorExts, jnxBgpM2PeerExtensions=jnxBgpM2PeerExtensions, jnxBgpM2NlriPrefix=jnxBgpM2NlriPrefix, jnxBgpM2PathAttrLocalPrefPresent=jnxBgpM2PathAttrLocalPrefPresent, jnxBgpM2ErrorsGroup=jnxBgpM2ErrorsGroup, jnxBgpM2BaseScalarNonCapExts=jnxBgpM2BaseScalarNonCapExts, jnxBgpM2CfgPeerRemoteAs=jnxBgpM2CfgPeerRemoteAs, jnxBgpM2PathAttrUnknownIndex=jnxBgpM2PathAttrUnknownIndex, jnxBgpM2PeerInUpdates=jnxBgpM2PeerInUpdates, jnxBgpM2AdjRibsOutIndex=jnxBgpM2AdjRibsOutIndex, jnxBgpM2CfgPeerMinRouteAdverInter=jnxBgpM2CfgPeerMinRouteAdverInter, jnxBgpM2PeerRemoteAddrType=jnxBgpM2PeerRemoteAddrType, jnxBgpM2PeerLastErrorReceivedTime=jnxBgpM2PeerLastErrorReceivedTime, jnxBgpM2PeerNonCapExts=jnxBgpM2PeerNonCapExts, jnxBgpM2NlriIndex=jnxBgpM2NlriIndex, jnxBgpM2NlriBest=jnxBgpM2NlriBest, jnxBgpM2PeerIndex=jnxBgpM2PeerIndex, jnxBgpM2PeerNegotiatedTimersTable=jnxBgpM2PeerNegotiatedTimersTable, jnxBgpM2PathAttrOrigin=jnxBgpM2PathAttrOrigin, jnxBgpM2SupportedAuthentication=jnxBgpM2SupportedAuthentication, jnxBgpM2PeerLocalAs=jnxBgpM2PeerLocalAs, jnxBgpM2CfgBaseScalarNonCapExts=jnxBgpM2CfgBaseScalarNonCapExts, jnxBgpM2PeerCountersEntry=jnxBgpM2PeerCountersEntry, jnxBgpM2PrefixInPrefixesActive=jnxBgpM2PrefixInPrefixesActive, jnxBgpM2PeerConfedMemberTable=jnxBgpM2PeerConfedMemberTable, jnxBgpM2PeerAsConfederationCfgGroup=jnxBgpM2PeerAsConfederationCfgGroup, jnxBgpM2PeerRemoteAs=jnxBgpM2PeerRemoteAs, jnxBgpM2PeerCapReceivedValue=jnxBgpM2PeerCapReceivedValue, jnxBgpM2PeerIdentifier=jnxBgpM2PeerIdentifier, jnxBgpM2AsPathIndex=jnxBgpM2AsPathIndex, jnxBgpM2PeerRouteReflectionExts=jnxBgpM2PeerRouteReflectionExts, jnxBgpM2PathAttrCommTable=jnxBgpM2PathAttrCommTable, jnxBgpM2ConfederationRouter=jnxBgpM2ConfederationRouter, jnxBgpM2PrefixOutPrefixes=jnxBgpM2PrefixOutPrefixes, jnxBgpM2CfgPeerRemotePort=jnxBgpM2CfgPeerRemotePort, JnxBgpM2Community=JnxBgpM2Community, jnxBgpM2PathAttrIndex=jnxBgpM2PathAttrIndex, jnxBgpM2AdjRibsOutRoute=jnxBgpM2AdjRibsOutRoute, jnxBgpM2CfgBaseScalarASConfedExts=jnxBgpM2CfgBaseScalarASConfedExts, jnxBgpM2PeerStatus=jnxBgpM2PeerStatus, jnxBgpM2PathAttrNextHopAddrType=jnxBgpM2PathAttrNextHopAddrType, jnxBgpM2PathAttrAtomicAggregate=jnxBgpM2PathAttrAtomicAggregate, jnxBgpM2PeerLastErrorReceivedData=jnxBgpM2PeerLastErrorReceivedData, jnxBgpM2PathAttrCapExts=jnxBgpM2PathAttrCapExts, jnxBgpM2CfgPeerEntry=jnxBgpM2CfgPeerEntry, jnxBgpM2PeerEventTimesEntry=jnxBgpM2PeerEventTimesEntry, jnxBgpM2PeerGroup=jnxBgpM2PeerGroup, jnxBgpM2PathAttrUnknownValue=jnxBgpM2PathAttrUnknownValue, jnxBgpM2Conformance=jnxBgpM2Conformance, jnxBgpM2AsPath4bytePathPresent=jnxBgpM2AsPath4bytePathPresent, jnxBgpM2PeerLocalPort=jnxBgpM2PeerLocalPort, jnxBgpM2PeerConfiguredTimersTable=jnxBgpM2PeerConfiguredTimersTable, jnxBgpM2AsPathCalcLength=jnxBgpM2AsPathCalcLength, jnxBgpM2LinkLocalNextHopTable=jnxBgpM2LinkLocalNextHopTable, jnxBgpM2AsPathType=jnxBgpM2AsPathType, jnxBgpM2PeerLastErrorReceivedText=jnxBgpM2PeerLastErrorReceivedText, jnxBgpM2AsPathGroup=jnxBgpM2AsPathGroup, jnxBgpM2PeerInTotalMessages=jnxBgpM2PeerInTotalMessages, jnxBgpM2CfgPeerConfedMemberTable=jnxBgpM2CfgPeerConfedMemberTable, jnxBgpM2PrefixCountersEntry=jnxBgpM2PrefixCountersEntry, jnxBgpM2ClusterId=jnxBgpM2ClusterId, jnxBgpM2PeerCapsAnnouncedEntry=jnxBgpM2PeerCapsAnnouncedEntry, jnxBgpM2SupportedCapabilityCode=jnxBgpM2SupportedCapabilityCode, jnxBgpM2CfgPeerConfedMember=jnxBgpM2CfgPeerConfedMember, jnxBgpM2PeerTable=jnxBgpM2PeerTable, jnxBgpM2PeerConfedMember=jnxBgpM2PeerConfedMember, jnxBgpM2VersionEntry=jnxBgpM2VersionEntry, jnxBgpM2PathAttrExtCommTable=jnxBgpM2PathAttrExtCommTable, jnxBgpM2CfgPeerAdminStatusEntry=jnxBgpM2CfgPeerAdminStatusEntry, jnxBgpM2CfgPeerExtensions=jnxBgpM2CfgPeerExtensions, jnxBgpM2PeerNegotiatedTimersEntry=jnxBgpM2PeerNegotiatedTimersEntry, jnxBgpM2BaseScalars=jnxBgpM2BaseScalars, jnxBgpM2PeerASConfederationExts=jnxBgpM2PeerASConfederationExts, jnxBgpM2PathAttrClusterEntry=jnxBgpM2PathAttrClusterEntry, jnxBgpM2PathAttrExtCommValue=jnxBgpM2PathAttrExtCommValue, jnxBgpM2MIBNotificationsGroup=jnxBgpM2MIBNotificationsGroup, jnxBgpM2PathAttributesGroup=jnxBgpM2PathAttributesGroup, jnxBgpM2CfgPeerCapExts=jnxBgpM2CfgPeerCapExts, jnxBgpM2CfgPeerLocalAddrType=jnxBgpM2CfgPeerLocalAddrType, jnxBgpM2PeerKeepAlive=jnxBgpM2PeerKeepAlive, jnxBgpM2RouteReflectionGroup=jnxBgpM2RouteReflectionGroup, jnxBgpM2PeerLastErrorSentData=jnxBgpM2PeerLastErrorSentData, jnxBgpM2CfgPeerEntryStorageType=jnxBgpM2CfgPeerEntryStorageType, jnxBgpM2LinkLocalNextHopPresent=jnxBgpM2LinkLocalNextHopPresent, jnxBgpM2TimersGroup=jnxBgpM2TimersGroup, jnxBgpM2CfgPeerTimersTable=jnxBgpM2CfgPeerTimersTable, jnxBgpM2CfgRouteReflector=jnxBgpM2CfgRouteReflector, jnxBgpM2PeerCapExts=jnxBgpM2PeerCapExts, jnxBgpM2AsPath4byteIndex=jnxBgpM2AsPath4byteIndex, jnxBgpM2PathAttrClusterValue=jnxBgpM2PathAttrClusterValue, jnxBgpM2PrefixInPrefixesRejected=jnxBgpM2PrefixInPrefixesRejected, jnxBgpM2CfgPeerHoldTimeConfigured=jnxBgpM2CfgPeerHoldTimeConfigured, jnxBgpM2PeerRouteReflectorCfgGroup=jnxBgpM2PeerRouteReflectorCfgGroup, jnxBgpM2ExtCommunitiesGroup=jnxBgpM2ExtCommunitiesGroup, jnxBgpM2PeerLocalAddrType=jnxBgpM2PeerLocalAddrType, JnxBgpM2Safi=JnxBgpM2Safi, jnxBgpM2VersionSupported=jnxBgpM2VersionSupported, jnxBgpM2PeerAuthSentCode=jnxBgpM2PeerAuthSentCode, jnxBgpM2PeerErrors=jnxBgpM2PeerErrors, jnxBgpM2NlriEntry=jnxBgpM2NlriEntry, jnxBgpM2BaseNotifications=jnxBgpM2BaseNotifications, jnxBgpM2CfgLocalAs=jnxBgpM2CfgLocalAs, jnxBgpM2PeerReflectorClient=jnxBgpM2PeerReflectorClient, jnxBgpM2CfgBaseScalarCapExts=jnxBgpM2CfgBaseScalarCapExts, jnxBgpM2PeerNegotiatedVersion=jnxBgpM2PeerNegotiatedVersion, jnxBgpM2PeerMinRouteAdverInterval=jnxBgpM2PeerMinRouteAdverInterval, jnxBgpM2CfgConfederationRouter=jnxBgpM2CfgConfederationRouter, jnxBgpM2AsPathString=jnxBgpM2AsPathString, jnxBgpM2=jnxBgpM2, jnxBgpM2CfgPeerRemoteAddrType=jnxBgpM2CfgPeerRemoteAddrType)
mibBuilder.exportSymbols("BGP4-V2-MIB-JUNIPER", jnxBgpM2CfgPeerReflectorClientTable=jnxBgpM2CfgPeerReflectorClientTable, jnxBgpM2PeerCapAnnouncedValue=jnxBgpM2PeerCapAnnouncedValue, jnxBgpM2SupportedCapabilitiesEntry=jnxBgpM2SupportedCapabilitiesEntry, jnxBgpM2PathAttrAggregatorAS=jnxBgpM2PathAttrAggregatorAS, jnxBgpM2CfgPeerAdminStatusTable=jnxBgpM2CfgPeerAdminStatusTable, jnxBgpM2PeerReflectorClientTable=jnxBgpM2PeerReflectorClientTable, jnxBgpM2NlriCalcLocalPref=jnxBgpM2NlriCalcLocalPref, jnxBgpM2NlriSafi=jnxBgpM2NlriSafi, jnxBgpM2CfgConfederationId=jnxBgpM2CfgConfederationId, jnxBgpM2PathAttrTable=jnxBgpM2PathAttrTable, jnxBgpM2SupportedAuthCode=jnxBgpM2SupportedAuthCode, jnxBgpM2PeerCapsReceivedTable=jnxBgpM2PeerCapsReceivedTable, jnxBgpM2MIBCompliance=jnxBgpM2MIBCompliance, PYSNMP_MODULE_ID=jnxBgpM2, jnxBgpM2CfgPeerConnectRetryInterval=jnxBgpM2CfgPeerConnectRetryInterval, jnxBgpM2CfgPeerAuthEnabled=jnxBgpM2CfgPeerAuthEnabled, jnxBgpM2PeerCountersTable=jnxBgpM2PeerCountersTable, jnxBgpM2PeerLastErrorSentText=jnxBgpM2PeerLastErrorSentText, jnxBgpM2PeerAuthSent=jnxBgpM2PeerAuthSent, jnxBgpM2AsConfederationGroup=jnxBgpM2AsConfederationGroup, jnxBgpM2PeerRoutingInstance=jnxBgpM2PeerRoutingInstance, jnxBgpM2PathAttrOriginatorId=jnxBgpM2PathAttrOriginatorId, jnxBgpM2PathAttrExtCommEntry=jnxBgpM2PathAttrExtCommEntry, jnxBgpM2AuthenticationGroup=jnxBgpM2AuthenticationGroup, jnxBgpM2PeerAuthEntry=jnxBgpM2PeerAuthEntry, jnxBgpM2PeerReflectorClientEntry=jnxBgpM2PeerReflectorClientEntry, jnxBgpM2CapabilitiesGroup=jnxBgpM2CapabilitiesGroup, jnxBgpM2PeerEntry=jnxBgpM2PeerEntry, jnxBgpM2PeerErrorsTable=jnxBgpM2PeerErrorsTable, jnxBgpM2Established=jnxBgpM2Established, jnxBgpM2LocalIdentifier=jnxBgpM2LocalIdentifier, jnxBgpM2BaseScalarRouteReflectExts=jnxBgpM2BaseScalarRouteReflectExts, jnxBgpM2SupportedCapabilities=jnxBgpM2SupportedCapabilities, jnxBgpM2CfgPeerBgpPeerEntry=jnxBgpM2CfgPeerBgpPeerEntry, jnxBgpM2CfgPeerASConfederationExts=jnxBgpM2CfgPeerASConfederationExts, jnxBgpM2PeerInUpdatesElapsedTime=jnxBgpM2PeerInUpdatesElapsedTime)
