#
# PySNMP MIB module BGP4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://./BGP4-MIB.my
# Produced by pysmi-1.1.10 at Wed Aug 23 14:18:16 2023
# On host Johanna-England-Sikt platform Linux version 6.2.0-26-generic by user johanna
# Using Python version 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, iso, NotificationType, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, mib_2, MibIdentifier, Unsigned32, Gauge32, TimeTicks, Integer32, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "NotificationType", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "mib-2", "MibIdentifier", "Unsigned32", "Gauge32", "TimeTicks", "Integer32", "Counter64", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bgp = ModuleIdentity((1, 3, 6, 1, 2, 1, 15))
bgp.setRevisions(('2006-01-11 00:00', '1994-05-05 00:00', '1991-10-26 18:39',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bgp.setRevisionsDescriptions(("Changes from RFC 1657: 1) Fixed the definitions of the notifications to make them equivalent to their initial definition in RFC 1269. 2) Added compliance and conformance info. 3) Updated information for the values of bgpPeerNegotiatedVersion, bgp4PathAttrLocalPref, bgp4PathAttrCalcLocalPref, bgp4PathAttrMultiExitDisc, bgp4PathAttrASPathSegement. 4) Added additional clarification comments where needed. 5) Noted where objects do not fully reflect the protocol as Known Issues. 6) Updated the DESCRIPTION for the bgp4PathAttrAtomicAggregate object. 7) The following objects have had their DESCRIPTION clause modified to remove the text that suggested (using 'should' verb) initializing the counter to zero on a transition to the established state: bgpPeerInUpdates, bgpPeerOutUpdates, bgpPeerInTotalMessages, bgpPeerOutTotalMessages Those implementations that still do this are still compliant with this new wording. Applications should not assume counters have started at zero. Published as RFC 4273.", 'Translated to SMIv2 and published as RFC 1657.', 'Initial version, published as RFC 1269.',))
if mibBuilder.loadTexts: bgp.setLastUpdated('200601110000Z')
if mibBuilder.loadTexts: bgp.setOrganization('IETF IDR Working Group')
if mibBuilder.loadTexts: bgp.setContactInfo('E-mail: idr@ietf.org Jeffrey Haas, Susan Hares (Editors) NextHop Technologies 825 Victors Way Suite 100 Ann Arbor, MI 48108-2738 Tel: +1 734 222-1600 Fax: +1 734 222-1602 E-mail: jhaas@nexthop.com skh@nexthop.com')
if mibBuilder.loadTexts: bgp.setDescription('The MIB module for the BGP-4 protocol. Copyright (C) The Internet Society (2006). This version of this MIB module is part of RFC 4273; see the RFC itself for full legal notices.')
bgpVersion = MibScalar((1, 3, 6, 1, 2, 1, 15, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpVersion.setReference('RFC 4271, Section 4.2.')
if mibBuilder.loadTexts: bgpVersion.setStatus('current')
if mibBuilder.loadTexts: bgpVersion.setDescription('Vector of supported BGP protocol version numbers. Each peer negotiates the version from this vector. Versions are identified via the string of bits contained within this object. The first octet contains bits 0 to 7, the second octet contains bits 8 to 15, and so on, with the most significant bit referring to the lowest bit number in the octet (e.g., the MSB of the first octet refers to bit 0). If a bit, i, is present and set, then the version (i+1) of the BGP is supported.')
bgpLocalAs = MibScalar((1, 3, 6, 1, 2, 1, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpLocalAs.setReference("RFC 4271, Section 4.2, 'My Autonomous System'.")
if mibBuilder.loadTexts: bgpLocalAs.setStatus('current')
if mibBuilder.loadTexts: bgpLocalAs.setDescription('The local autonomous system number.')
bgpPeerTable = MibTable((1, 3, 6, 1, 2, 1, 15, 3), )
if mibBuilder.loadTexts: bgpPeerTable.setStatus('current')
if mibBuilder.loadTexts: bgpPeerTable.setDescription('BGP peer table. This table contains, one entry per BGP peer, information about the connections with BGP peers.')
bgpPeerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 15, 3, 1), ).setIndexNames((0, "BGP4-MIB", "bgpPeerRemoteAddr"))
if mibBuilder.loadTexts: bgpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: bgpPeerEntry.setDescription('Entry containing information about the connection with a BGP peer.')
bgpPeerIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerIdentifier.setReference("RFC 4271, Section 4.2, 'BGP Identifier'.")
if mibBuilder.loadTexts: bgpPeerIdentifier.setStatus('current')
if mibBuilder.loadTexts: bgpPeerIdentifier.setDescription("The BGP Identifier of this entry's BGP peer. This entry MUST be 0.0.0.0 unless the bgpPeerState is in the openconfirm or the established state.")
bgpPeerState = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerState.setReference('RFC 4271, Section 8.2.2.')
if mibBuilder.loadTexts: bgpPeerState.setStatus('current')
if mibBuilder.loadTexts: bgpPeerState.setDescription('The BGP peer connection state.')
bgpPeerAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpPeerAdminStatus.setReference('RFC 4271, Section 8.1.2.')
if mibBuilder.loadTexts: bgpPeerAdminStatus.setStatus('current')
if mibBuilder.loadTexts: bgpPeerAdminStatus.setDescription("The desired state of the BGP connection. A transition from 'stop' to 'start' will cause the BGP Manual Start Event to be generated. A transition from 'start' to 'stop' will cause the BGP Manual Stop Event to be generated. This parameter can be used to restart BGP peer connections. Care should be used in providing write access to this object without adequate authentication.")
bgpPeerNegotiatedVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerNegotiatedVersion.setReference('RFC 4271, Section 4.2. RFC 4271, Section 7.')
if mibBuilder.loadTexts: bgpPeerNegotiatedVersion.setStatus('current')
if mibBuilder.loadTexts: bgpPeerNegotiatedVersion.setDescription('The negotiated version of BGP running between the two peers. This entry MUST be zero (0) unless the bgpPeerState is in the openconfirm or the established state. Note that legal values for this object are between 0 and 255.')
bgpPeerLocalAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerLocalAddr.setStatus('current')
if mibBuilder.loadTexts: bgpPeerLocalAddr.setDescription("The local IP address of this entry's BGP connection.")
bgpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerLocalPort.setStatus('current')
if mibBuilder.loadTexts: bgpPeerLocalPort.setDescription('The local port for the TCP connection between the BGP peers.')
bgpPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: bgpPeerRemoteAddr.setDescription("The remote IP address of this entry's BGP peer.")
bgpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerRemotePort.setStatus('current')
if mibBuilder.loadTexts: bgpPeerRemotePort.setDescription('The remote port for the TCP connection between the BGP peers. Note that the objects bgpPeerLocalAddr, bgpPeerLocalPort, bgpPeerRemoteAddr, and bgpPeerRemotePort provide the appropriate reference to the standard MIB TCP connection table.')
bgpPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerRemoteAs.setReference('RFC 4271, Section 4.2.')
if mibBuilder.loadTexts: bgpPeerRemoteAs.setStatus('current')
if mibBuilder.loadTexts: bgpPeerRemoteAs.setDescription('The remote autonomous system number received in the BGP OPEN message.')
bgpPeerInUpdates = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerInUpdates.setReference('RFC 4271, Section 4.3.')
if mibBuilder.loadTexts: bgpPeerInUpdates.setStatus('current')
if mibBuilder.loadTexts: bgpPeerInUpdates.setDescription('The number of BGP UPDATE messages received on this connection.')
bgpPeerOutUpdates = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerOutUpdates.setReference('RFC 4271, Section 4.3.')
if mibBuilder.loadTexts: bgpPeerOutUpdates.setStatus('current')
if mibBuilder.loadTexts: bgpPeerOutUpdates.setDescription('The number of BGP UPDATE messages transmitted on this connection.')
bgpPeerInTotalMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerInTotalMessages.setReference('RFC 4271, Section 4.')
if mibBuilder.loadTexts: bgpPeerInTotalMessages.setStatus('current')
if mibBuilder.loadTexts: bgpPeerInTotalMessages.setDescription('The total number of messages received from the remote peer on this connection.')
bgpPeerOutTotalMessages = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerOutTotalMessages.setReference('RFC 4271, Section 4.')
if mibBuilder.loadTexts: bgpPeerOutTotalMessages.setStatus('current')
if mibBuilder.loadTexts: bgpPeerOutTotalMessages.setDescription('The total number of messages transmitted to the remote peer on this connection.')
bgpPeerLastError = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerLastError.setReference('RFC 4271, Section 4.5.')
if mibBuilder.loadTexts: bgpPeerLastError.setStatus('current')
if mibBuilder.loadTexts: bgpPeerLastError.setDescription('The last error code and subcode seen by this peer on this connection. If no error has occurred, this field is zero. Otherwise, the first byte of this two byte OCTET STRING contains the error code, and the second byte contains the subcode.')
bgpPeerFsmEstablishedTransitions = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerFsmEstablishedTransitions.setReference('RFC 4271, Section 8.')
if mibBuilder.loadTexts: bgpPeerFsmEstablishedTransitions.setStatus('current')
if mibBuilder.loadTexts: bgpPeerFsmEstablishedTransitions.setDescription('The total number of times the BGP FSM transitioned into the established state for this peer.')
bgpPeerFsmEstablishedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 16), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerFsmEstablishedTime.setReference('RFC 4271, Section 8.')
if mibBuilder.loadTexts: bgpPeerFsmEstablishedTime.setStatus('current')
if mibBuilder.loadTexts: bgpPeerFsmEstablishedTime.setDescription('This timer indicates how long (in seconds) this peer has been in the established state or how long since this peer was last in the established state. It is set to zero when a new peer is configured or when the router is booted.')
bgpPeerConnectRetryInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpPeerConnectRetryInterval.setReference("RFC 4271, Section 8.2.2. This is the value used to initialize the 'ConnectRetryTimer'.")
if mibBuilder.loadTexts: bgpPeerConnectRetryInterval.setStatus('current')
if mibBuilder.loadTexts: bgpPeerConnectRetryInterval.setDescription('Time interval (in seconds) for the ConnectRetry timer. The suggested value for this timer is 120 seconds.')
bgpPeerHoldTime = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), ))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerHoldTime.setReference('RFC 4271, Section 4.2.')
if mibBuilder.loadTexts: bgpPeerHoldTime.setStatus('current')
if mibBuilder.loadTexts: bgpPeerHoldTime.setDescription('Time interval (in seconds) for the Hold Timer established with the peer. The value of this object is calculated by this BGP speaker, using the smaller of the values in bgpPeerHoldTimeConfigured and the Hold Time received in the OPEN message. This value must be at least three seconds if it is not zero (0). If the Hold Timer has not been established with the peer this object MUST have a value of zero (0). If the bgpPeerHoldTimeConfigured object has a value of (0), then this object MUST have a value of (0).')
bgpPeerKeepAlive = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 21845), ))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerKeepAlive.setReference('RFC 4271, Section 4.4.')
if mibBuilder.loadTexts: bgpPeerKeepAlive.setStatus('current')
if mibBuilder.loadTexts: bgpPeerKeepAlive.setDescription('Time interval (in seconds) for the KeepAlive timer established with the peer. The value of this object is calculated by this BGP speaker such that, when compared with bgpPeerHoldTime, it has the same proportion that bgpPeerKeepAliveConfigured has, compared with bgpPeerHoldTimeConfigured. If the KeepAlive timer has not been established with the peer, this object MUST have a value of zero (0). If the of bgpPeerKeepAliveConfigured object has a value of (0), then this object MUST have a value of (0).')
bgpPeerHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpPeerHoldTimeConfigured.setReference('RFC 4271, Section 4.2. RFC 4271, Section 10.')
if mibBuilder.loadTexts: bgpPeerHoldTimeConfigured.setStatus('current')
if mibBuilder.loadTexts: bgpPeerHoldTimeConfigured.setDescription('Time interval (in seconds) for the Hold Time configured for this BGP speaker with this peer. This value is placed in an OPEN message sent to this peer by this BGP speaker, and is compared with the Hold Time field in an OPEN message received from the peer when determining the Hold Time (bgpPeerHoldTime) with the peer. This value must not be less than three seconds if it is not zero (0). If it is zero (0), the Hold Time is NOT to be established with the peer. The suggested value for this timer is 90 seconds.')
bgpPeerKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 21845), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpPeerKeepAliveConfigured.setReference('RFC 4271, Section 4.4. RFC 4271, Section 10.')
if mibBuilder.loadTexts: bgpPeerKeepAliveConfigured.setStatus('current')
if mibBuilder.loadTexts: bgpPeerKeepAliveConfigured.setDescription("Time interval (in seconds) for the KeepAlive timer configured for this BGP speaker with this peer. The value of this object will only determine the KEEPALIVE messages' frequency relative to the value specified in bgpPeerHoldTimeConfigured; the actual time interval for the KEEPALIVE messages is indicated by bgpPeerKeepAlive. A reasonable maximum value for this timer would be one third of that of bgpPeerHoldTimeConfigured. If the value of this object is zero (0), no periodical KEEPALIVE messages are sent to the peer after the BGP connection has been established. The suggested value for this timer is 30 seconds.")
bgpPeerMinASOriginationInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpPeerMinASOriginationInterval.setReference('RFC 4271, Section 9.2.1.2. RFC 4271, Section 10.')
if mibBuilder.loadTexts: bgpPeerMinASOriginationInterval.setStatus('current')
if mibBuilder.loadTexts: bgpPeerMinASOriginationInterval.setDescription('Time interval (in seconds) for the MinASOriginationInterval timer. The suggested value for this timer is 15 seconds.')
bgpPeerMinRouteAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bgpPeerMinRouteAdvertisementInterval.setReference('RFC 4271, Section 9.2.1.1. RFC 4271, Section 10.')
if mibBuilder.loadTexts: bgpPeerMinRouteAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: bgpPeerMinRouteAdvertisementInterval.setDescription('Time interval (in seconds) for the MinRouteAdvertisementInterval timer. The suggested value for this timer is 30 seconds for EBGP connections and 5 seconds for IBGP connections.')
bgpPeerInUpdateElapsedTime = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 3, 1, 24), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPeerInUpdateElapsedTime.setReference('RFC 4271, Section 4.3. RFC 4271, Section 8.2.2, Established state.')
if mibBuilder.loadTexts: bgpPeerInUpdateElapsedTime.setStatus('current')
if mibBuilder.loadTexts: bgpPeerInUpdateElapsedTime.setDescription('Elapsed time (in seconds) since the last BGP UPDATE message was received from the peer. Each time bgpPeerInUpdates is incremented, the value of this object is set to zero (0).')
bgpIdentifier = MibScalar((1, 3, 6, 1, 2, 1, 15, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpIdentifier.setReference('RFC 4271, Section 4.2.')
if mibBuilder.loadTexts: bgpIdentifier.setStatus('current')
if mibBuilder.loadTexts: bgpIdentifier.setDescription('The BGP Identifier of the local system.')
bgpRcvdPathAttrTable = MibTable((1, 3, 6, 1, 2, 1, 15, 5), )
if mibBuilder.loadTexts: bgpRcvdPathAttrTable.setStatus('obsolete')
if mibBuilder.loadTexts: bgpRcvdPathAttrTable.setDescription('The BGP Received Path Attribute Table contains information about paths to destination networks, received from all peers running BGP version 3 or less.')
bgpPathAttrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 15, 5, 1), ).setIndexNames((0, "BGP4-MIB", "bgpPathAttrDestNetwork"), (0, "BGP4-MIB", "bgpPathAttrPeer"))
if mibBuilder.loadTexts: bgpPathAttrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: bgpPathAttrEntry.setDescription('Information about a path to a network.')
bgpPathAttrPeer = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrPeer.setStatus('obsolete')
if mibBuilder.loadTexts: bgpPathAttrPeer.setDescription('The IP address of the peer where the path information was learned.')
bgpPathAttrDestNetwork = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrDestNetwork.setReference('RFC 1267, Section 4.3.')
if mibBuilder.loadTexts: bgpPathAttrDestNetwork.setStatus('obsolete')
if mibBuilder.loadTexts: bgpPathAttrDestNetwork.setDescription('The address of the destination network.')
bgpPathAttrOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrOrigin.setReference('RFC 1267, Section 4.3. RFC 1267, Section 5.')
if mibBuilder.loadTexts: bgpPathAttrOrigin.setStatus('obsolete')
if mibBuilder.loadTexts: bgpPathAttrOrigin.setDescription('The ultimate origin of the path information.')
bgpPathAttrASPath = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrASPath.setReference('RFC 1267, Section 4.3. RFC 1267, Section 5.')
if mibBuilder.loadTexts: bgpPathAttrASPath.setStatus('obsolete')
if mibBuilder.loadTexts: bgpPathAttrASPath.setDescription('The set of ASes that must be traversed to reach the network. This object is probably best represented as SEQUENCE OF INTEGER. For SMI compatibility, though, it is represented as OCTET STRING. Each AS is represented as a pair of octets according to the following algorithm: first-byte-of-pair = ASNumber / 256; second-byte-of-pair = ASNumber & 255;')
bgpPathAttrNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrNextHop.setReference('RFC 1267, Section 4.3. RFC 1267, Section 5.')
if mibBuilder.loadTexts: bgpPathAttrNextHop.setStatus('obsolete')
if mibBuilder.loadTexts: bgpPathAttrNextHop.setDescription('The address of the border router that should be used for the destination network.')
bgpPathAttrInterASMetric = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgpPathAttrInterASMetric.setReference('RFC 1267, Section 4.3. RFC 1267, Section 5.')
if mibBuilder.loadTexts: bgpPathAttrInterASMetric.setStatus('obsolete')
if mibBuilder.loadTexts: bgpPathAttrInterASMetric.setDescription('The optional inter-AS metric. If this attribute has not been provided for this route, the value for this object is 0.')
bgp4PathAttrTable = MibTable((1, 3, 6, 1, 2, 1, 15, 6), )
if mibBuilder.loadTexts: bgp4PathAttrTable.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrTable.setDescription('The BGP-4 Received Path Attribute Table contains information about paths to destination networks, received from all BGP4 peers.')
bgp4PathAttrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 15, 6, 1), ).setIndexNames((0, "BGP4-MIB", "bgp4PathAttrIpAddrPrefix"), (0, "BGP4-MIB", "bgp4PathAttrIpAddrPrefixLen"), (0, "BGP4-MIB", "bgp4PathAttrPeer"))
if mibBuilder.loadTexts: bgp4PathAttrEntry.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrEntry.setDescription('Information about a path to a network.')
bgp4PathAttrPeer = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrPeer.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrPeer.setDescription('The IP address of the peer where the path information was learned.')
bgp4PathAttrIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrIpAddrPrefixLen.setDescription('Length in bits of the IP address prefix in the Network Layer Reachability Information field.')
bgp4PathAttrIpAddrPrefix = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrIpAddrPrefix.setReference('RFC 4271, Section 4.3.')
if mibBuilder.loadTexts: bgp4PathAttrIpAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrIpAddrPrefix.setDescription('An IP address prefix in the Network Layer Reachability Information field. This object is an IP address containing the prefix with length specified by bgp4PathAttrIpAddrPrefixLen. Any bits beyond the length specified by bgp4PathAttrIpAddrPrefixLen are zeroed.')
bgp4PathAttrOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrOrigin.setReference('RFC 4271, Section 4.3. RFC 4271, Section 5.1.1.')
if mibBuilder.loadTexts: bgp4PathAttrOrigin.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrOrigin.setDescription('The ultimate origin of the path information.')
bgp4PathAttrASPathSegment = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrASPathSegment.setReference('RFC 4271, Section 4.3. RFC 4271, Section 5.1.2.')
if mibBuilder.loadTexts: bgp4PathAttrASPathSegment.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrASPathSegment.setDescription('The sequence of AS path segments. Each AS path segment is represented by a triple <type, length, value>. The type is a 1-octet field that has two possible values: 1 AS_SET: unordered set of ASes that a route in the UPDATE message has traversed 2 AS_SEQUENCE: ordered set of ASes that a route in the UPDATE message has traversed. The length is a 1-octet field containing the number of ASes in the value field. The value field contains one or more AS numbers. Each AS is represented in the octet string as a pair of octets according to the following algorithm: first-byte-of-pair = ASNumber / 256; second-byte-of-pair = ASNumber & 255; Known Issues: o BGP Confederations will result in a type of either 3 or 4. o An AS Path may be longer than 255 octets. This may result in this object containing a truncated AS Path.')
bgp4PathAttrNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrNextHop.setReference('RFC 4271, Section 4.3. RFC 4271, Section 5.1.3.')
if mibBuilder.loadTexts: bgp4PathAttrNextHop.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrNextHop.setDescription('The address of the border router that should be used for the destination network. This address is the NEXT_HOP address received in the UPDATE packet.')
bgp4PathAttrMultiExitDisc = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrMultiExitDisc.setReference('RFC 4271, Section 4.3. RFC 4271, Section 5.1.4.')
if mibBuilder.loadTexts: bgp4PathAttrMultiExitDisc.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrMultiExitDisc.setDescription('This metric is used to discriminate between multiple exit points to an adjacent autonomous system. A value of -1 indicates the absence of this attribute. Known Issues: o The BGP-4 specification uses an unsigned 32 bit number. Thus, this object cannot represent the full range of the protocol.')
bgp4PathAttrLocalPref = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrLocalPref.setReference('RFC 4271, Section 4.3. RFC 4271, Section 5.1.5.')
if mibBuilder.loadTexts: bgp4PathAttrLocalPref.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrLocalPref.setDescription("The originating BGP4 speaker's degree of preference for an advertised route. A value of -1 indicates the absence of this attribute. Known Issues: o The BGP-4 specification uses an unsigned 32 bit number and thus this object cannot represent the full range of the protocol.")
bgp4PathAttrAtomicAggregate = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lessSpecificRouteNotSelected", 1), ("lessSpecificRouteSelected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrAtomicAggregate.setReference('RFC 4271, Sections 5.1.6 and 9.1.4.')
if mibBuilder.loadTexts: bgp4PathAttrAtomicAggregate.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrAtomicAggregate.setDescription("If the ATOMIC_AGGREGATE attribute is present in the Path Attributes then this object MUST have a value of 'lessSpecificRouteNotSelected'. If the ATOMIC_AGGREGATE attribute is missing in the Path Attributes then this object MUST have a value of 'lessSpecificRouteSelected'. Note that ATOMIC_AGGREGATE is now a primarily informational attribute.")
bgp4PathAttrAggregatorAS = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrAggregatorAS.setReference('RFC 4271, Section 5.1.7. RFC 4271, Section 9.2.2.2.')
if mibBuilder.loadTexts: bgp4PathAttrAggregatorAS.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrAggregatorAS.setDescription('The AS number of the last BGP4 speaker that performed route aggregation. A value of zero (0) indicates the absence of this attribute. Note that propagation of AS of zero is illegal in the Internet.')
bgp4PathAttrAggregatorAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrAggregatorAddr.setReference('RFC 4271, Section 5.1.7. RFC 4271, Section 9.2.2.2.')
if mibBuilder.loadTexts: bgp4PathAttrAggregatorAddr.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrAggregatorAddr.setDescription('The IP address of the last BGP4 speaker that performed route aggregation. A value of 0.0.0.0 indicates the absence of this attribute.')
bgp4PathAttrCalcLocalPref = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrCalcLocalPref.setReference('RFC 4271, Section 9.1.1.')
if mibBuilder.loadTexts: bgp4PathAttrCalcLocalPref.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrCalcLocalPref.setDescription('The degree of preference calculated by the receiving BGP4 speaker for an advertised route. A value of -1 indicates the absence of this attribute. Known Issues: o The BGP-4 specification uses an unsigned 32 bit number and thus this object cannot represent the full range of the protocol.')
bgp4PathAttrBest = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrBest.setReference('RFC 4271, Section 9.1.2.')
if mibBuilder.loadTexts: bgp4PathAttrBest.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrBest.setDescription('An indication of whether this route was chosen as the best BGP4 route for this destination.')
bgp4PathAttrUnknown = MibTableColumn((1, 3, 6, 1, 2, 1, 15, 6, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgp4PathAttrUnknown.setReference('RFC 4271, Section 5.')
if mibBuilder.loadTexts: bgp4PathAttrUnknown.setStatus('current')
if mibBuilder.loadTexts: bgp4PathAttrUnknown.setDescription('One or more path attributes not understood by this BGP4 speaker. Path attributes are recorded in the Update Path attribute format of type, length, value. Size zero (0) indicates the absence of such attributes. Octets beyond the maximum size, if any, are not recorded by this object. Known Issues: o Attributes understood by this speaker, but not represented in this MIB, are unavailable to the agent.')
bgpNotification = MibIdentifier((1, 3, 6, 1, 2, 1, 15, 0))
bgpEstablishedNotification = NotificationType((1, 3, 6, 1, 2, 1, 15, 0, 1)).setObjects(("BGP4-MIB", "bgpPeerRemoteAddr"), ("BGP4-MIB", "bgpPeerLastError"), ("BGP4-MIB", "bgpPeerState"))
if mibBuilder.loadTexts: bgpEstablishedNotification.setStatus('current')
if mibBuilder.loadTexts: bgpEstablishedNotification.setDescription('The bgpEstablishedNotification event is generated when the BGP FSM enters the established state. This Notification replaces the bgpEstablished Notification.')
bgpBackwardTransNotification = NotificationType((1, 3, 6, 1, 2, 1, 15, 0, 2)).setObjects(("BGP4-MIB", "bgpPeerRemoteAddr"), ("BGP4-MIB", "bgpPeerLastError"), ("BGP4-MIB", "bgpPeerState"))
if mibBuilder.loadTexts: bgpBackwardTransNotification.setStatus('current')
if mibBuilder.loadTexts: bgpBackwardTransNotification.setDescription('The bgpBackwardTransNotification event is generated when the BGP FSM moves from a higher numbered state to a lower numbered state. This Notification replaces the bgpBackwardsTransition Notification.')
bgpTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 15, 7))
bgpEstablished = NotificationType((1, 3, 6, 1, 2, 1, 15, 7, 1)).setObjects(("BGP4-MIB", "bgpPeerLastError"), ("BGP4-MIB", "bgpPeerState"))
if mibBuilder.loadTexts: bgpEstablished.setStatus('deprecated')
if mibBuilder.loadTexts: bgpEstablished.setDescription('The bgpEstablished event is generated when the BGP FSM enters the established state. This Notification has been replaced by the bgpEstablishedNotification Notification.')
bgpBackwardTransition = NotificationType((1, 3, 6, 1, 2, 1, 15, 7, 2)).setObjects(("BGP4-MIB", "bgpPeerLastError"), ("BGP4-MIB", "bgpPeerState"))
if mibBuilder.loadTexts: bgpBackwardTransition.setStatus('deprecated')
if mibBuilder.loadTexts: bgpBackwardTransition.setDescription('The bgpBackwardTransition event is generated when the BGP FSM moves from a higher numbered state to a lower numbered state. This Notification has been replaced by the bgpBackwardTransNotification Notification.')
bgp4MIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 15, 8))
bgp4MIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 15, 8, 1))
bgp4MIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 15, 8, 2))
bgp4MIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 15, 8, 1, 1)).setObjects(("BGP4-MIB", "bgp4MIBGlobalsGroup"), ("BGP4-MIB", "bgp4MIBPeerGroup"), ("BGP4-MIB", "bgp4MIBPathAttrGroup"), ("BGP4-MIB", "bgp4MIBNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bgp4MIBCompliance = bgp4MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: bgp4MIBCompliance.setDescription('The compliance statement for entities which implement the BGP4 mib.')
bgp4MIBDeprecatedCompliances = ModuleCompliance((1, 3, 6, 1, 2, 1, 15, 8, 1, 2)).setObjects(("BGP4-MIB", "bgp4MIBTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bgp4MIBDeprecatedCompliances = bgp4MIBDeprecatedCompliances.setStatus('deprecated')
if mibBuilder.loadTexts: bgp4MIBDeprecatedCompliances.setDescription('The compliance statement documenting deprecated objects in the BGP4 mib.')
bgp4MIBObsoleteCompliances = ModuleCompliance((1, 3, 6, 1, 2, 1, 15, 8, 1, 3)).setObjects(("BGP4-MIB", "bgpRcvdPathAttrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bgp4MIBObsoleteCompliances = bgp4MIBObsoleteCompliances.setStatus('obsolete')
if mibBuilder.loadTexts: bgp4MIBObsoleteCompliances.setDescription('The compliance statement documenting obsolete objects in the BGP4 mib.')
bgp4MIBGlobalsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 15, 8, 2, 1)).setObjects(("BGP4-MIB", "bgpVersion"), ("BGP4-MIB", "bgpLocalAs"), ("BGP4-MIB", "bgpIdentifier"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bgp4MIBGlobalsGroup = bgp4MIBGlobalsGroup.setStatus('current')
if mibBuilder.loadTexts: bgp4MIBGlobalsGroup.setDescription('A collection of objects providing information on global BGP state.')
bgp4MIBPeerGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 15, 8, 2, 2)).setObjects(("BGP4-MIB", "bgpPeerIdentifier"), ("BGP4-MIB", "bgpPeerState"), ("BGP4-MIB", "bgpPeerAdminStatus"), ("BGP4-MIB", "bgpPeerNegotiatedVersion"), ("BGP4-MIB", "bgpPeerLocalAddr"), ("BGP4-MIB", "bgpPeerLocalPort"), ("BGP4-MIB", "bgpPeerRemoteAddr"), ("BGP4-MIB", "bgpPeerRemotePort"), ("BGP4-MIB", "bgpPeerRemoteAs"), ("BGP4-MIB", "bgpPeerInUpdates"), ("BGP4-MIB", "bgpPeerOutUpdates"), ("BGP4-MIB", "bgpPeerInTotalMessages"), ("BGP4-MIB", "bgpPeerOutTotalMessages"), ("BGP4-MIB", "bgpPeerLastError"), ("BGP4-MIB", "bgpPeerFsmEstablishedTransitions"), ("BGP4-MIB", "bgpPeerFsmEstablishedTime"), ("BGP4-MIB", "bgpPeerConnectRetryInterval"), ("BGP4-MIB", "bgpPeerHoldTime"), ("BGP4-MIB", "bgpPeerKeepAlive"), ("BGP4-MIB", "bgpPeerHoldTimeConfigured"), ("BGP4-MIB", "bgpPeerKeepAliveConfigured"), ("BGP4-MIB", "bgpPeerMinASOriginationInterval"), ("BGP4-MIB", "bgpPeerMinRouteAdvertisementInterval"), ("BGP4-MIB", "bgpPeerInUpdateElapsedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bgp4MIBPeerGroup = bgp4MIBPeerGroup.setStatus('current')
if mibBuilder.loadTexts: bgp4MIBPeerGroup.setDescription('A collection of objects for managing BGP peers.')
bgpRcvdPathAttrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 15, 8, 2, 3)).setObjects(("BGP4-MIB", "bgpPathAttrPeer"), ("BGP4-MIB", "bgpPathAttrDestNetwork"), ("BGP4-MIB", "bgpPathAttrOrigin"), ("BGP4-MIB", "bgpPathAttrASPath"), ("BGP4-MIB", "bgpPathAttrNextHop"), ("BGP4-MIB", "bgpPathAttrInterASMetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bgpRcvdPathAttrGroup = bgpRcvdPathAttrGroup.setStatus('obsolete')
if mibBuilder.loadTexts: bgpRcvdPathAttrGroup.setDescription('A collection of objects for managing BGP-3 and earlier path entries. This conformance group, like BGP-3, is obsolete.')
bgp4MIBPathAttrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 15, 8, 2, 4)).setObjects(("BGP4-MIB", "bgp4PathAttrPeer"), ("BGP4-MIB", "bgp4PathAttrIpAddrPrefixLen"), ("BGP4-MIB", "bgp4PathAttrIpAddrPrefix"), ("BGP4-MIB", "bgp4PathAttrOrigin"), ("BGP4-MIB", "bgp4PathAttrASPathSegment"), ("BGP4-MIB", "bgp4PathAttrNextHop"), ("BGP4-MIB", "bgp4PathAttrMultiExitDisc"), ("BGP4-MIB", "bgp4PathAttrLocalPref"), ("BGP4-MIB", "bgp4PathAttrAtomicAggregate"), ("BGP4-MIB", "bgp4PathAttrAggregatorAS"), ("BGP4-MIB", "bgp4PathAttrAggregatorAddr"), ("BGP4-MIB", "bgp4PathAttrCalcLocalPref"), ("BGP4-MIB", "bgp4PathAttrBest"), ("BGP4-MIB", "bgp4PathAttrUnknown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bgp4MIBPathAttrGroup = bgp4MIBPathAttrGroup.setStatus('current')
if mibBuilder.loadTexts: bgp4MIBPathAttrGroup.setDescription('A collection of objects for managing BGP path entries.')
bgp4MIBTrapGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 15, 8, 2, 5)).setObjects(("BGP4-MIB", "bgpEstablished"), ("BGP4-MIB", "bgpBackwardTransition"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bgp4MIBTrapGroup = bgp4MIBTrapGroup.setStatus('deprecated')
if mibBuilder.loadTexts: bgp4MIBTrapGroup.setDescription('A collection of notifications for signaling changes in BGP peer relationships. Obsoleted by bgp4MIBNotificationGroup')
bgp4MIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 15, 8, 2, 6)).setObjects(("BGP4-MIB", "bgpEstablishedNotification"), ("BGP4-MIB", "bgpBackwardTransNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bgp4MIBNotificationGroup = bgp4MIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: bgp4MIBNotificationGroup.setDescription('A collection of notifications for signaling changes in BGP peer relationships. Obsoletes bgp4MIBTrapGroup.')
mibBuilder.exportSymbols("BGP4-MIB", bgp4PathAttrEntry=bgp4PathAttrEntry, bgp4PathAttrLocalPref=bgp4PathAttrLocalPref, bgpTraps=bgpTraps, bgpPeerHoldTimeConfigured=bgpPeerHoldTimeConfigured, bgpPeerInUpdates=bgpPeerInUpdates, bgpBackwardTransNotification=bgpBackwardTransNotification, bgpPeerEntry=bgpPeerEntry, bgpPeerLastError=bgpPeerLastError, bgpPathAttrPeer=bgpPathAttrPeer, bgp4MIBGlobalsGroup=bgp4MIBGlobalsGroup, bgp4MIBNotificationGroup=bgp4MIBNotificationGroup, bgpBackwardTransition=bgpBackwardTransition, bgpPeerRemotePort=bgpPeerRemotePort, bgp4MIBPeerGroup=bgp4MIBPeerGroup, bgpRcvdPathAttrGroup=bgpRcvdPathAttrGroup, bgpPeerConnectRetryInterval=bgpPeerConnectRetryInterval, bgpPeerMinASOriginationInterval=bgpPeerMinASOriginationInterval, bgpPeerIdentifier=bgpPeerIdentifier, bgpPathAttrNextHop=bgpPathAttrNextHop, bgp4PathAttrAggregatorAS=bgp4PathAttrAggregatorAS, bgpPathAttrDestNetwork=bgpPathAttrDestNetwork, bgp4PathAttrIpAddrPrefixLen=bgp4PathAttrIpAddrPrefixLen, bgpIdentifier=bgpIdentifier, bgp4MIBObsoleteCompliances=bgp4MIBObsoleteCompliances, bgp=bgp, bgpPeerInTotalMessages=bgpPeerInTotalMessages, bgpPeerInUpdateElapsedTime=bgpPeerInUpdateElapsedTime, bgpPathAttrInterASMetric=bgpPathAttrInterASMetric, bgp4PathAttrTable=bgp4PathAttrTable, bgp4PathAttrNextHop=bgp4PathAttrNextHop, bgp4PathAttrCalcLocalPref=bgp4PathAttrCalcLocalPref, bgpPeerTable=bgpPeerTable, bgpVersion=bgpVersion, bgp4PathAttrIpAddrPrefix=bgp4PathAttrIpAddrPrefix, bgp4MIBGroups=bgp4MIBGroups, bgp4PathAttrOrigin=bgp4PathAttrOrigin, bgp4MIBTrapGroup=bgp4MIBTrapGroup, bgpRcvdPathAttrTable=bgpRcvdPathAttrTable, bgpPeerHoldTime=bgpPeerHoldTime, bgp4PathAttrASPathSegment=bgp4PathAttrASPathSegment, bgpEstablishedNotification=bgpEstablishedNotification, bgpPathAttrASPath=bgpPathAttrASPath, bgpPeerAdminStatus=bgpPeerAdminStatus, bgpPeerOutTotalMessages=bgpPeerOutTotalMessages, bgpPeerFsmEstablishedTransitions=bgpPeerFsmEstablishedTransitions, bgp4PathAttrAtomicAggregate=bgp4PathAttrAtomicAggregate, bgpPeerMinRouteAdvertisementInterval=bgpPeerMinRouteAdvertisementInterval, bgpEstablished=bgpEstablished, bgpNotification=bgpNotification, bgpPeerFsmEstablishedTime=bgpPeerFsmEstablishedTime, bgp4PathAttrAggregatorAddr=bgp4PathAttrAggregatorAddr, bgp4PathAttrBest=bgp4PathAttrBest, bgp4PathAttrPeer=bgp4PathAttrPeer, bgpPathAttrOrigin=bgpPathAttrOrigin, bgpPeerState=bgpPeerState, bgpPeerRemoteAs=bgpPeerRemoteAs, bgpPeerKeepAlive=bgpPeerKeepAlive, bgp4PathAttrMultiExitDisc=bgp4PathAttrMultiExitDisc, bgp4MIBCompliance=bgp4MIBCompliance, bgp4MIBPathAttrGroup=bgp4MIBPathAttrGroup, bgpPeerLocalAddr=bgpPeerLocalAddr, bgpPeerOutUpdates=bgpPeerOutUpdates, bgp4PathAttrUnknown=bgp4PathAttrUnknown, bgp4MIBDeprecatedCompliances=bgp4MIBDeprecatedCompliances, bgp4MIBConformance=bgp4MIBConformance, bgp4MIBCompliances=bgp4MIBCompliances, bgpPeerRemoteAddr=bgpPeerRemoteAddr, bgpPeerNegotiatedVersion=bgpPeerNegotiatedVersion, bgpPeerLocalPort=bgpPeerLocalPort, bgpPathAttrEntry=bgpPathAttrEntry, bgpPeerKeepAliveConfigured=bgpPeerKeepAliveConfigured, bgpLocalAs=bgpLocalAs, PYSNMP_MODULE_ID=bgp)
