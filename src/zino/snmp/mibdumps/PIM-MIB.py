#
# PySNMP MIB module PIM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/mvold/d/zino/mibs/PIM-MIB.my
# Produced by pysmi-0.3.4 at Thu Jul 18 12:37:03 2024
# On host agrajag platform Linux version 6.6.37 by user mvold
# Using Python version 3.11.9 (main, Apr  2 2024, 08:25:04) [GCC 13.2.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ipMRouteSource, ipMRouteNextHopGroup, ipMRouteGroup, ipMRouteNextHopIfIndex, ipMRouteNextHopSource, ipMRouteNextHopSourceMask, ipMRouteSourceMask, ipMRouteNextHopAddress = mibBuilder.importSymbols("IPMROUTE-STD-MIB", "ipMRouteSource", "ipMRouteNextHopGroup", "ipMRouteGroup", "ipMRouteNextHopIfIndex", "ipMRouteNextHopSource", "ipMRouteNextHopSourceMask", "ipMRouteSourceMask", "ipMRouteNextHopAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, iso, Gauge32, Unsigned32, ObjectIdentity, TimeTicks, experimental, Counter64, MibIdentifier, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "iso", "Gauge32", "Unsigned32", "ObjectIdentity", "TimeTicks", "experimental", "Counter64", "MibIdentifier", "ModuleIdentity", "Bits")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
pimMIB = ModuleIdentity((1, 3, 6, 1, 3, 61))
pimMIB.setRevisions(('2000-09-28 00:00',))
if mibBuilder.loadTexts: pimMIB.setLastUpdated('200009280000Z')
if mibBuilder.loadTexts: pimMIB.setOrganization('IETF IDMR Working Group.')
pimMIBObjects = MibIdentifier((1, 3, 6, 1, 3, 61, 1))
pimTraps = MibIdentifier((1, 3, 6, 1, 3, 61, 1, 0))
pim = MibIdentifier((1, 3, 6, 1, 3, 61, 1, 1))
pimJoinPruneInterval = MibScalar((1, 3, 6, 1, 3, 61, 1, 1, 1), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pimJoinPruneInterval.setStatus('current')
pimInterfaceTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 2), )
if mibBuilder.loadTexts: pimInterfaceTable.setStatus('current')
pimInterfaceEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 2, 1), ).setIndexNames((0, "PIM-MIB", "pimInterfaceIfIndex"))
if mibBuilder.loadTexts: pimInterfaceEntry.setStatus('current')
pimInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pimInterfaceIfIndex.setStatus('current')
pimInterfaceAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimInterfaceAddress.setStatus('current')
pimInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimInterfaceNetMask.setStatus('current')
pimInterfaceMode = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dense", 1), ("sparse", 2), ("sparseDense", 3))).clone('dense')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pimInterfaceMode.setStatus('current')
pimInterfaceDR = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimInterfaceDR.setStatus('current')
pimInterfaceHelloInterval = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 6), Integer32().clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pimInterfaceHelloInterval.setStatus('current')
pimInterfaceStatus = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pimInterfaceStatus.setStatus('current')
pimInterfaceJoinPruneInterval = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 8), Integer32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pimInterfaceJoinPruneInterval.setStatus('current')
pimInterfaceCBSRPreference = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pimInterfaceCBSRPreference.setStatus('current')
pimNeighborTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 3), )
if mibBuilder.loadTexts: pimNeighborTable.setStatus('current')
pimNeighborEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 3, 1), ).setIndexNames((0, "PIM-MIB", "pimNeighborAddress"))
if mibBuilder.loadTexts: pimNeighborEntry.setStatus('current')
pimNeighborAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: pimNeighborAddress.setStatus('current')
pimNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimNeighborIfIndex.setStatus('current')
pimNeighborUpTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimNeighborUpTime.setStatus('current')
pimNeighborExpiryTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimNeighborExpiryTime.setStatus('current')
pimNeighborMode = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dense", 1), ("sparse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimNeighborMode.setStatus('deprecated')
pimIpMRouteTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 4), )
if mibBuilder.loadTexts: pimIpMRouteTable.setStatus('current')
pimIpMRouteEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 4, 1), ).setIndexNames((0, "IPMROUTE-STD-MIB", "ipMRouteGroup"), (0, "IPMROUTE-STD-MIB", "ipMRouteSource"), (0, "IPMROUTE-STD-MIB", "ipMRouteSourceMask"))
if mibBuilder.loadTexts: pimIpMRouteEntry.setStatus('current')
pimIpMRouteUpstreamAssertTimer = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 4, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimIpMRouteUpstreamAssertTimer.setStatus('current')
pimIpMRouteAssertMetric = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimIpMRouteAssertMetric.setStatus('current')
pimIpMRouteAssertMetricPref = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimIpMRouteAssertMetricPref.setStatus('current')
pimIpMRouteAssertRPTBit = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimIpMRouteAssertRPTBit.setStatus('current')
pimIpMRouteFlags = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimIpMRouteFlags.setStatus('current')
pimIpMRouteNextHopTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 7), )
if mibBuilder.loadTexts: pimIpMRouteNextHopTable.setStatus('current')
pimIpMRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 7, 1), ).setIndexNames((0, "IPMROUTE-STD-MIB", "ipMRouteNextHopGroup"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopSource"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopSourceMask"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopIfIndex"), (0, "IPMROUTE-STD-MIB", "ipMRouteNextHopAddress"))
if mibBuilder.loadTexts: pimIpMRouteNextHopEntry.setStatus('current')
pimIpMRouteNextHopPruneReason = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("prune", 2), ("assert", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimIpMRouteNextHopPruneReason.setStatus('current')
pimRPTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 5), )
if mibBuilder.loadTexts: pimRPTable.setStatus('deprecated')
pimRPEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 5, 1), ).setIndexNames((0, "PIM-MIB", "pimRPGroupAddress"), (0, "PIM-MIB", "pimRPAddress"))
if mibBuilder.loadTexts: pimRPEntry.setStatus('deprecated')
pimRPGroupAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: pimRPGroupAddress.setStatus('deprecated')
pimRPAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: pimRPAddress.setStatus('deprecated')
pimRPState = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimRPState.setStatus('deprecated')
pimRPStateTimer = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimRPStateTimer.setStatus('deprecated')
pimRPLastChange = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimRPLastChange.setStatus('deprecated')
pimRPRowStatus = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pimRPRowStatus.setStatus('deprecated')
pimRPSetTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 6), )
if mibBuilder.loadTexts: pimRPSetTable.setStatus('current')
pimRPSetEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 6, 1), ).setIndexNames((0, "PIM-MIB", "pimRPSetComponent"), (0, "PIM-MIB", "pimRPSetGroupAddress"), (0, "PIM-MIB", "pimRPSetGroupMask"), (0, "PIM-MIB", "pimRPSetAddress"))
if mibBuilder.loadTexts: pimRPSetEntry.setStatus('current')
pimRPSetGroupAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: pimRPSetGroupAddress.setStatus('current')
pimRPSetGroupMask = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: pimRPSetGroupMask.setStatus('current')
pimRPSetAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 3), IpAddress())
if mibBuilder.loadTexts: pimRPSetAddress.setStatus('current')
pimRPSetHoldTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pimRPSetHoldTime.setStatus('current')
pimRPSetExpiryTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimRPSetExpiryTime.setStatus('current')
pimRPSetComponent = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: pimRPSetComponent.setStatus('current')
pimCandidateRPTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 11), )
if mibBuilder.loadTexts: pimCandidateRPTable.setStatus('current')
pimCandidateRPEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 11, 1), ).setIndexNames((0, "PIM-MIB", "pimCandidateRPGroupAddress"), (0, "PIM-MIB", "pimCandidateRPGroupMask"))
if mibBuilder.loadTexts: pimCandidateRPEntry.setStatus('current')
pimCandidateRPGroupAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 11, 1, 1), IpAddress())
if mibBuilder.loadTexts: pimCandidateRPGroupAddress.setStatus('current')
pimCandidateRPGroupMask = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: pimCandidateRPGroupMask.setStatus('current')
pimCandidateRPAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 11, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pimCandidateRPAddress.setStatus('current')
pimCandidateRPRowStatus = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pimCandidateRPRowStatus.setStatus('current')
pimComponentTable = MibTable((1, 3, 6, 1, 3, 61, 1, 1, 12), )
if mibBuilder.loadTexts: pimComponentTable.setStatus('current')
pimComponentEntry = MibTableRow((1, 3, 6, 1, 3, 61, 1, 1, 12, 1), ).setIndexNames((0, "PIM-MIB", "pimComponentIndex"))
if mibBuilder.loadTexts: pimComponentEntry.setStatus('current')
pimComponentIndex = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: pimComponentIndex.setStatus('current')
pimComponentBSRAddress = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimComponentBSRAddress.setStatus('current')
pimComponentBSRExpiryTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 12, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pimComponentBSRExpiryTime.setStatus('current')
pimComponentCRPHoldTime = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pimComponentCRPHoldTime.setStatus('current')
pimComponentStatus = MibTableColumn((1, 3, 6, 1, 3, 61, 1, 1, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pimComponentStatus.setStatus('current')
pimNeighborLoss = NotificationType((1, 3, 6, 1, 3, 61, 1, 0, 1)).setObjects(("PIM-MIB", "pimNeighborIfIndex"))
if mibBuilder.loadTexts: pimNeighborLoss.setStatus('current')
pimMIBConformance = MibIdentifier((1, 3, 6, 1, 3, 61, 2))
pimMIBCompliances = MibIdentifier((1, 3, 6, 1, 3, 61, 2, 1))
pimMIBGroups = MibIdentifier((1, 3, 6, 1, 3, 61, 2, 2))
pimV1MIBCompliance = ModuleCompliance((1, 3, 6, 1, 3, 61, 2, 1, 1)).setObjects(("PIM-MIB", "pimV1MIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pimV1MIBCompliance = pimV1MIBCompliance.setStatus('deprecated')
pimSparseV2MIBCompliance = ModuleCompliance((1, 3, 6, 1, 3, 61, 2, 1, 2)).setObjects(("PIM-MIB", "pimV2MIBGroup"), ("PIM-MIB", "pimV2CandidateRPMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pimSparseV2MIBCompliance = pimSparseV2MIBCompliance.setStatus('current')
pimDenseV2MIBCompliance = ModuleCompliance((1, 3, 6, 1, 3, 61, 2, 1, 3)).setObjects(("PIM-MIB", "pimDenseV2MIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pimDenseV2MIBCompliance = pimDenseV2MIBCompliance.setStatus('current')
pimV2MIBGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 2)).setObjects(("PIM-MIB", "pimJoinPruneInterval"), ("PIM-MIB", "pimNeighborIfIndex"), ("PIM-MIB", "pimNeighborUpTime"), ("PIM-MIB", "pimNeighborExpiryTime"), ("PIM-MIB", "pimInterfaceAddress"), ("PIM-MIB", "pimInterfaceNetMask"), ("PIM-MIB", "pimInterfaceDR"), ("PIM-MIB", "pimInterfaceHelloInterval"), ("PIM-MIB", "pimInterfaceStatus"), ("PIM-MIB", "pimInterfaceJoinPruneInterval"), ("PIM-MIB", "pimInterfaceCBSRPreference"), ("PIM-MIB", "pimInterfaceMode"), ("PIM-MIB", "pimRPSetHoldTime"), ("PIM-MIB", "pimRPSetExpiryTime"), ("PIM-MIB", "pimComponentBSRAddress"), ("PIM-MIB", "pimComponentBSRExpiryTime"), ("PIM-MIB", "pimComponentCRPHoldTime"), ("PIM-MIB", "pimComponentStatus"), ("PIM-MIB", "pimIpMRouteFlags"), ("PIM-MIB", "pimIpMRouteUpstreamAssertTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pimV2MIBGroup = pimV2MIBGroup.setStatus('current')
pimDenseV2MIBGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 5)).setObjects(("PIM-MIB", "pimNeighborIfIndex"), ("PIM-MIB", "pimNeighborUpTime"), ("PIM-MIB", "pimNeighborExpiryTime"), ("PIM-MIB", "pimInterfaceAddress"), ("PIM-MIB", "pimInterfaceNetMask"), ("PIM-MIB", "pimInterfaceDR"), ("PIM-MIB", "pimInterfaceHelloInterval"), ("PIM-MIB", "pimInterfaceStatus"), ("PIM-MIB", "pimInterfaceMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pimDenseV2MIBGroup = pimDenseV2MIBGroup.setStatus('current')
pimV2CandidateRPMIBGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 3)).setObjects(("PIM-MIB", "pimCandidateRPAddress"), ("PIM-MIB", "pimCandidateRPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pimV2CandidateRPMIBGroup = pimV2CandidateRPMIBGroup.setStatus('current')
pimV1MIBGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 4)).setObjects(("PIM-MIB", "pimJoinPruneInterval"), ("PIM-MIB", "pimNeighborIfIndex"), ("PIM-MIB", "pimNeighborUpTime"), ("PIM-MIB", "pimNeighborExpiryTime"), ("PIM-MIB", "pimNeighborMode"), ("PIM-MIB", "pimInterfaceAddress"), ("PIM-MIB", "pimInterfaceNetMask"), ("PIM-MIB", "pimInterfaceJoinPruneInterval"), ("PIM-MIB", "pimInterfaceStatus"), ("PIM-MIB", "pimInterfaceMode"), ("PIM-MIB", "pimInterfaceDR"), ("PIM-MIB", "pimInterfaceHelloInterval"), ("PIM-MIB", "pimRPState"), ("PIM-MIB", "pimRPStateTimer"), ("PIM-MIB", "pimRPLastChange"), ("PIM-MIB", "pimRPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pimV1MIBGroup = pimV1MIBGroup.setStatus('deprecated')
pimNextHopGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 6)).setObjects(("PIM-MIB", "pimIpMRouteNextHopPruneReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pimNextHopGroup = pimNextHopGroup.setStatus('current')
pimAssertGroup = ObjectGroup((1, 3, 6, 1, 3, 61, 2, 2, 7)).setObjects(("PIM-MIB", "pimIpMRouteAssertMetric"), ("PIM-MIB", "pimIpMRouteAssertMetricPref"), ("PIM-MIB", "pimIpMRouteAssertRPTBit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pimAssertGroup = pimAssertGroup.setStatus('current')
mibBuilder.exportSymbols("PIM-MIB", pimRPAddress=pimRPAddress, pimV1MIBCompliance=pimV1MIBCompliance, pimRPStateTimer=pimRPStateTimer, pimInterfaceCBSRPreference=pimInterfaceCBSRPreference, pimIpMRouteFlags=pimIpMRouteFlags, pimCandidateRPGroupAddress=pimCandidateRPGroupAddress, pimIpMRouteEntry=pimIpMRouteEntry, pimCandidateRPGroupMask=pimCandidateRPGroupMask, pimComponentBSRExpiryTime=pimComponentBSRExpiryTime, pimSparseV2MIBCompliance=pimSparseV2MIBCompliance, pimMIBConformance=pimMIBConformance, pimRPState=pimRPState, pimInterfaceMode=pimInterfaceMode, pimTraps=pimTraps, pimCandidateRPRowStatus=pimCandidateRPRowStatus, pimV1MIBGroup=pimV1MIBGroup, pimRPSetHoldTime=pimRPSetHoldTime, pimRPLastChange=pimRPLastChange, pimAssertGroup=pimAssertGroup, pimInterfaceEntry=pimInterfaceEntry, pimIpMRouteNextHopTable=pimIpMRouteNextHopTable, pimInterfaceHelloInterval=pimInterfaceHelloInterval, pimRPTable=pimRPTable, pimCandidateRPEntry=pimCandidateRPEntry, pimNeighborAddress=pimNeighborAddress, pimJoinPruneInterval=pimJoinPruneInterval, pimCandidateRPAddress=pimCandidateRPAddress, pimRPSetGroupMask=pimRPSetGroupMask, pimRPSetComponent=pimRPSetComponent, pimIpMRouteAssertRPTBit=pimIpMRouteAssertRPTBit, pimDenseV2MIBCompliance=pimDenseV2MIBCompliance, pimNextHopGroup=pimNextHopGroup, pimInterfaceNetMask=pimInterfaceNetMask, pimMIB=pimMIB, pimComponentIndex=pimComponentIndex, pimV2MIBGroup=pimV2MIBGroup, pimRPSetGroupAddress=pimRPSetGroupAddress, pimMIBObjects=pimMIBObjects, pimCandidateRPTable=pimCandidateRPTable, pimNeighborTable=pimNeighborTable, PYSNMP_MODULE_ID=pimMIB, pimIpMRouteAssertMetricPref=pimIpMRouteAssertMetricPref, pimRPSetExpiryTime=pimRPSetExpiryTime, pimComponentEntry=pimComponentEntry, pimComponentCRPHoldTime=pimComponentCRPHoldTime, pimInterfaceJoinPruneInterval=pimInterfaceJoinPruneInterval, pimNeighborIfIndex=pimNeighborIfIndex, pimNeighborUpTime=pimNeighborUpTime, pimInterfaceIfIndex=pimInterfaceIfIndex, pimRPGroupAddress=pimRPGroupAddress, pimRPSetTable=pimRPSetTable, pimMIBGroups=pimMIBGroups, pimRPRowStatus=pimRPRowStatus, pimDenseV2MIBGroup=pimDenseV2MIBGroup, pimMIBCompliances=pimMIBCompliances, pimIpMRouteTable=pimIpMRouteTable, pimRPSetEntry=pimRPSetEntry, pimComponentBSRAddress=pimComponentBSRAddress, pimNeighborMode=pimNeighborMode, pimComponentStatus=pimComponentStatus, pimIpMRouteNextHopPruneReason=pimIpMRouteNextHopPruneReason, pim=pim, pimIpMRouteNextHopEntry=pimIpMRouteNextHopEntry, pimNeighborLoss=pimNeighborLoss, pimInterfaceDR=pimInterfaceDR, pimNeighborEntry=pimNeighborEntry, pimV2CandidateRPMIBGroup=pimV2CandidateRPMIBGroup, pimInterfaceAddress=pimInterfaceAddress, pimRPEntry=pimRPEntry, pimRPSetAddress=pimRPSetAddress, pimIpMRouteUpstreamAssertTimer=pimIpMRouteUpstreamAssertTimer, pimNeighborExpiryTime=pimNeighborExpiryTime, pimInterfaceStatus=pimInterfaceStatus, pimInterfaceTable=pimInterfaceTable, pimIpMRouteAssertMetric=pimIpMRouteAssertMetric, pimComponentTable=pimComponentTable)
