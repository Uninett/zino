#
# PySNMP MIB module CISCO-BGP4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://./CISCO-BGP4-MIB.mib
# Produced by pysmi-1.1.10 at Wed Aug 23 14:32:09 2023
# On host Johanna-England-Sikt platform Linux version 6.2.0-26-generic by user johanna
# Using Python version 3.10.12 (main, Jun 11 2023, 05:26:28) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
bgpPeerRemoteAddr, bgpPeerState, bgpPeerLastError, bgpPeerEntry = mibBuilder.importSymbols("BGP4-MIB", "bgpPeerRemoteAddr", "bgpPeerState", "bgpPeerLastError", "bgpPeerEntry")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAutonomousSystemNumber, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAutonomousSystemNumber", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Counter64, MibIdentifier, ObjectIdentity, iso, NotificationType, IpAddress, Bits, ModuleIdentity, TimeTicks, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Counter64", "MibIdentifier", "ObjectIdentity", "iso", "NotificationType", "IpAddress", "Bits", "ModuleIdentity", "TimeTicks", "Gauge32", "Unsigned32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoBgp4MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 187))
ciscoBgp4MIB.setRevisions(('2010-09-30 00:00', '2003-02-24 00:00', '2002-12-19 00:00', '2001-08-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoBgp4MIB.setRevisionsDescriptions(('+Added cbgpNotifsEnable and cbgpLocalAs +Modified CbgpNetworkAddress TC +Added cbgpPeer2Table +Added cbgpPeer2CapsTable +Added cbgpPeer2AddrFamilyTable +Added cbgpPeer2AddrFamilyPrefixTable +Added notification cbgpPeer2EstablishedNotification +Added notification cbgpPeer2BackwardTransNotification +Added notification cbgpPeer2FsmStateChange +Added notification cbgpPeer2BackwardTransition +Added notification cbgpPeer2PrefixThresholdExceeded +Added notification cbgpPeer2PrefixThresholdClear', '+Added cbgpPeerCapsTable +Added cbgpPeerAddrFamilyTable +Added cbgpPeerAddrFamilyPrefixTable +Added notification event cbgpBackwardTransition +Added notification event cbgpPrefixThresholdExceeded +Added notification event cbgpPrefixThresholdClear', '+Added cbgpPeerPrefixTable +Added notification event cbgpFsmStateChange', 'Initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoBgp4MIB.setLastUpdated('201009300000Z')
if mibBuilder.loadTexts: ciscoBgp4MIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoBgp4MIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-iprouting-bgp@cisco.com')
if mibBuilder.loadTexts: ciscoBgp4MIB.setDescription("An extension to the IETF BGP4 MIB module defined in RFC 1657. Following is the terminology associated with Border Gateway Protocol(BGP). UPDATE message UPDATE messages are used to transfer routing information between BGP peers. An UPDATE message is used to advertise a single feasible route to a peer, or to withdraw multiple unfeasible routes from service. Adj-RIBs-In The Adj-RIBs-In store routing information that has been learned from inbound UPDATE messages. Their contents represent routes that are available as an input to the Decision Process. Loc-RIB(BGP table) The Loc-RIB contains the local routing information that the BGP speaker has selected by applying its local policies to the routing information contained in its Adj-RIBs-In. Adj-RIBs-Out The Adj-RIBs-Out store the information that the local BGP speaker has selected for advertisement to its peers. The routing information stored in the Adj-RIBs-Out will be carried in the local BGP speaker's UPDATE messages and advertised to its peers. Path Attributes A variable length sequence of path attributes is present in every UPDATE. Each path attribute is a triple <attribute type, attribute length, attribute value> of variable length. Network Layer Reachability Information(NLRI) A variable length field present in UPDATE messages which contains a list of Network Layer address prefixes. Address Family Identifier(AFI) Primary identifier to indicate the type of the Network Layer Reachability Information(NLRI) being carried. Subsequent Address Family Identifier(SAFI) Secondary identifier to indicate the type of the Network Layer Reachability Information(NLRI) being carried.")
ciscoBgp4MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 187, 1))
cbgpRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1))
cbgpPeer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2))
cbgpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 3))
class CbgpSafi(TextualConvention, Integer32):
    reference = 'RFC-2858: Multiprotocol Extensions for BGP-4, RFC-2547: BGP/MPLS VPNs'
    description = 'Subsequent Address Family Identifier(SAFI) is used by BGP speaker to indicate the type of the the Network Layer Reachability Information(NLRI) being carried. RFC-2858 has defined the following values for SAFI. 1 - Network Layer Reachability Information used for unicast forwarding 2 - Network Layer Reachability Information used for multicast forwarding 3 - Network Layer Reachability Information used for both unicast and multicast forwarding. SAFI values 128 through 255 are for private use.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 128))
    namedValues = NamedValues(("unicast", 1), ("multicast", 2), ("unicastAndMulticast", 3), ("vpn", 128))

class CbgpNetworkAddress(TextualConvention, OctetString):
    reference = 'RFC 2858, Multiprotocol Extensions for BGP-4. RFC 2547, Section 4.1, BGP/MPLS VPNs.'
    description = "Represents the Network Address prefix carried in the BGP UPDATE messages. In the following table, column 'Type' gives the kind of Network Layer address which will be stored in the object of this type based on the values of Address Family Identifier(AFI) and SAFI. AFI SAFI Type ipv4(1) unicast(1) IPv4 address ipv4(1) multicast(2) IPv4 address ipv4(1) vpn(128) VPN-IPv4 address ipv6(2) unicast(1) IPv6 address ipv6(2) multicast(2) IPv6 address ipv6(2) vpn(128) VPN-IPv6 address A VPN-IPv4 address is a 12-byte quantity, beginning with an 8-byte 'Route Distinguisher (RD)' and ending with a 4-byte IPv4 address. A VPN-IPv6 address is a 24-byte quantity, beginning with an 8-byte 'Route Distinguisher (RD)' and ending with a 16-byte IPv6 address."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

cbgpNotifsEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 3, 1), Bits().clone(namedValues=NamedValues(("notifsEnable", 0), ("notifsPeer2Enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpNotifsEnable.setStatus('current')
if mibBuilder.loadTexts: cbgpNotifsEnable.setDescription('Indicates whether the specific notifications are enabled. If notifsEnable(0) bit is set to 1, then the notifications defined in ciscoBgp4NotificationsGroup1 are enabled; If notifsPeer2Enable(1) bit is set to 1, then the notifications defined in ciscoBgp4Peer2NotificationsGroup are enabled.')
cbgpLocalAs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 3, 2), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpLocalAs.setReference("RFC 4271, Section 4.2, 'My Autonomous System'. RFC 4893, BGP Support for Four-octet AS Number Space.")
if mibBuilder.loadTexts: cbgpLocalAs.setStatus('current')
if mibBuilder.loadTexts: cbgpLocalAs.setDescription('The local autonomous system (AS) number.')
cbgpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1), )
if mibBuilder.loadTexts: cbgpRouteTable.setReference('RFC-1771: A Border Gateway Protocol 4 (BGP-4), RFC-2858: Multiprotocol Extensions for BGP-4, RFC-2547: BGP/MPLS VPNs')
if mibBuilder.loadTexts: cbgpRouteTable.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteTable.setDescription('This table contains information about routes to destination networks from all BGP4 peers. Since BGP4 can carry routes for multiple Network Layer protocols, this table has the Address Family Identifier(AFI) of the Network Layer protocol as the first index. Further for a given AFI, routes carried by BGP4 are distinguished based on Subsequent Address Family Identifiers(SAFI). Hence that is used as the second index. Conceptually there is a separate Loc-RIB maintained by the BGP speaker for each combination of AFI and SAFI supported by it.')
cbgpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-BGP4-MIB", "cbgpRouteAfi"), (0, "CISCO-BGP4-MIB", "cbgpRouteSafi"), (0, "CISCO-BGP4-MIB", "cbgpRoutePeerType"), (0, "CISCO-BGP4-MIB", "cbgpRoutePeer"), (0, "CISCO-BGP4-MIB", "cbgpRouteAddrPrefix"), (0, "CISCO-BGP4-MIB", "cbgpRouteAddrPrefixLen"))
if mibBuilder.loadTexts: cbgpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteEntry.setDescription('Information about a path to a network received from a peer.')
cbgpRouteAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cbgpRouteAfi.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteAfi.setDescription('Represents Address Family Identifier(AFI) of the Network Layer protocol associated with the route. An implementation is only required to support IPv4 unicast and VPNv4 (Value - 1) address families.')
cbgpRouteSafi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 2), CbgpSafi())
if mibBuilder.loadTexts: cbgpRouteSafi.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteSafi.setDescription('Represents Subsequent Address Family Identifier(SAFI) of the route. It gives additional information about the type of the route. An implementation is only required to support IPv4 unicast(Value - 1) and VPNv4( Value - 128) address families.')
cbgpRoutePeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 3), InetAddressType())
if mibBuilder.loadTexts: cbgpRoutePeerType.setStatus('current')
if mibBuilder.loadTexts: cbgpRoutePeerType.setDescription('Represents the type of Network Layer address stored in cbgpRoutePeer. An implementation is only required to support IPv4 address type(Value - 1).')
cbgpRoutePeer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 4), InetAddress())
if mibBuilder.loadTexts: cbgpRoutePeer.setStatus('current')
if mibBuilder.loadTexts: cbgpRoutePeer.setDescription('The Network Layer address of the peer where the route information was learned. An implementation is only required to support an IPv4 peer.')
cbgpRouteAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 5), CbgpNetworkAddress())
if mibBuilder.loadTexts: cbgpRouteAddrPrefix.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteAddrPrefix.setDescription('A Network Address prefix in the Network Layer Reachability Information field of BGP UPDATE message. This object is a Network Address containing the prefix with length specified by cbgpRouteAddrPrefixLen. Any bits beyond the length specified by cbgpRouteAddrPrefixLen are zeroed.')
cbgpRouteAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2040)))
if mibBuilder.loadTexts: cbgpRouteAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteAddrPrefixLen.setDescription('Length in bits of the Network Address prefix in the Network Layer Reachability Information field.')
cbgpRouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteOrigin.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteOrigin.setDescription('The ultimate origin of the route information.')
cbgpRouteASPathSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteASPathSegment.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteASPathSegment.setDescription('The sequence of AS path segments. Each AS path segment is represented by a triple <type, length, value>. The type is a 1-octet field which has two possible values: 1 AS_SET: unordered set of ASs a route in the UPDATE message has traversed 2 AS_SEQUENCE: ordered set of ASs a route in the UPDATE message has traversed. The length is a 1-octet field containing the number of ASs in the value field. The value field contains one or more AS numbers, each AS is represented in the octet string as a pair of octets according to the following algorithm: first-byte-of-pair = ASNumber / 256; second-byte-of-pair = ASNumber & 255;')
cbgpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 9), CbgpNetworkAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteNextHop.setDescription('The Network Layer address of the border router that should be used for the destination network.')
cbgpRouteMedPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteMedPresent.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteMedPresent.setDescription('Indicates the presence/absence of MULTI_EXIT_DISC attribute for the route.')
cbgpRouteMultiExitDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteMultiExitDisc.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteMultiExitDisc.setDescription('This metric is used to discriminate between multiple exit points to an adjacent autonomous system. The value of this object is irrelevant if the value of of cbgpRouteMedPresent is false(2).')
cbgpRouteLocalPrefPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteLocalPrefPresent.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteLocalPrefPresent.setDescription('Indicates the presence/absence of LOCAL_PREF attribute for the route.')
cbgpRouteLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteLocalPref.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteLocalPref.setDescription('The degree of preference calculated by the local BGP4 speaker for the route. The value of this object is irrelevant if the value of cbgpRouteLocalPrefPresent is false(2).')
cbgpRouteAtomicAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lessSpecificRouteNotSelected", 1), ("lessSpecificRouteSelected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteAtomicAggregate.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteAtomicAggregate.setDescription('Whether or not the local system has selected a less specific route without selecting a more specific route.')
cbgpRouteAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteAggregatorAS.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteAggregatorAS.setDescription('The AS number of the last BGP4 speaker that performed route aggregation. A value of zero (0) indicates the absence of this attribute.')
cbgpRouteAggregatorAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 16), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteAggregatorAddrType.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteAggregatorAddrType.setDescription('Represents the type of Network Layer address stored in cbgpRouteAggregatorAddr.')
cbgpRouteAggregatorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 17), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteAggregatorAddr.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteAggregatorAddr.setDescription('The Network Layer address of the last BGP4 speaker that performed route aggregation. A value of all zeros indicates the absence of this attribute.')
cbgpRouteBest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteBest.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteBest.setDescription('An indication of whether or not this route was chosen as the best BGP4 route.')
cbgpRouteUnknownAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 1, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpRouteUnknownAttr.setReference('RFC-1771: A Border Gateway Protocol 4 (BGP-4), section 4.3')
if mibBuilder.loadTexts: cbgpRouteUnknownAttr.setStatus('current')
if mibBuilder.loadTexts: cbgpRouteUnknownAttr.setDescription('One or more path attributes not understood by this BGP4 speaker. Size zero (0) indicates the absence of such attribute(s). Octets beyond the maximum size, if any, are not recorded by this object. Each path attribute is a triple <attribute type, attribute length, attribute value> of variable length. Attribute Type is a two-octet field that consists of the Attribute Flags octet followed by the Attribute Type Code octet. If the Extended Length bit of the Attribute Flags octet is set to 0, the third octet of the Path Attribute contains the length of the attribute data in octets. If the Extended Length bit of the Attribute Flags octet is set to 1, then the third and the fourth octets of the path attribute contain the length of the attribute data in octets. The remaining octets of the Path Attribute represent the attribute value and are interpreted according to the Attribute Flags and the Attribute Type Code.')
cbgpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 1), )
if mibBuilder.loadTexts: cbgpPeerTable.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerTable.setDescription('BGP peer table. This table contains, one entry per BGP peer, information about the connections with BGP peers.')
cbgpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 1, 1), )
bgpPeerEntry.registerAugmentions(("CISCO-BGP4-MIB", "cbgpPeerEntry"))
cbgpPeerEntry.setIndexNames(*bgpPeerEntry.getIndexNames())
if mibBuilder.loadTexts: cbgpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerEntry.setDescription('Entry containing information about the connection with a BGP peer.')
cbgpPeerPrefixAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerPrefixAccepted.setStatus('deprecated')
if mibBuilder.loadTexts: cbgpPeerPrefixAccepted.setDescription('Number of Route prefixes received on this connnection, which are accepted after applying filters. Possible filters are route maps, prefix lists, distributed lists, etc.')
cbgpPeerPrefixDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerPrefixDenied.setStatus('deprecated')
if mibBuilder.loadTexts: cbgpPeerPrefixDenied.setDescription("Counter which gets incremented when a route prefix received on this connection is denied or when a route prefix is denied during soft reset of this connection if 'soft-reconfiguration' is on . This object is initialized to zero when the peer is configured or the router is rebooted")
cbgpPeerPrefixLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpPeerPrefixLimit.setStatus('deprecated')
if mibBuilder.loadTexts: cbgpPeerPrefixLimit.setDescription('Max number of route prefixes accepted on this connection')
cbgpPeerPrefixAdvertised = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerPrefixAdvertised.setStatus('deprecated')
if mibBuilder.loadTexts: cbgpPeerPrefixAdvertised.setDescription('Counter which gets incremented when a route prefix is advertised on this connection. This object is initialized to zero when the peer is configured or the router is rebooted')
cbgpPeerPrefixSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerPrefixSuppressed.setStatus('deprecated')
if mibBuilder.loadTexts: cbgpPeerPrefixSuppressed.setDescription('Counter which gets incremented when a route prefix is suppressed from being sent on this connection. This object is initialized to zero when the peer is configured or the router is rebooted')
cbgpPeerPrefixWithdrawn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerPrefixWithdrawn.setStatus('deprecated')
if mibBuilder.loadTexts: cbgpPeerPrefixWithdrawn.setDescription('Counter which gets incremented when a route prefix is withdrawn on this connection. This object is initialized to zero when the peer is configured or the router is rebooted')
cbgpPeerLastErrorTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerLastErrorTxt.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerLastErrorTxt.setDescription('Implementation specific error description for bgpPeerLastErrorReceived.')
cbgpPeerPrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerPrevState.setReference('Section 8, RFC 1771, A Border Gateway Protocol 4 (BGP-4).')
if mibBuilder.loadTexts: cbgpPeerPrevState.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerPrevState.setDescription('The BGP peer connection previous state.')
cbgpPeerCapsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 2), )
if mibBuilder.loadTexts: cbgpPeerCapsTable.setReference('RFC 2842, Capabilities Advertisement with BGP-4. RFC2818, Route Refresh Capability for BGP-4. RFC2858, Multiprotocol Extensions for BGP-4. draft-ietf-idr-restart-05.txt, Graceful Restart Mechanism for BGP')
if mibBuilder.loadTexts: cbgpPeerCapsTable.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerCapsTable.setDescription('This table contains the capabilities that are supported by a peer. Capabilities of a peer are received during BGP connection establishment. Values corresponding to each received capability are stored in this table. When a new capability is received, this table is updated with a new entry. When an existing capability is not received during the latest connection establishment, the corresponding entry is deleted from the table.')
cbgpPeerCapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 2, 1), ).setIndexNames((0, "BGP4-MIB", "bgpPeerRemoteAddr"), (0, "CISCO-BGP4-MIB", "cbgpPeerCapCode"), (0, "CISCO-BGP4-MIB", "cbgpPeerCapIndex"))
if mibBuilder.loadTexts: cbgpPeerCapsEntry.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerCapsEntry.setDescription('Each entry represents a capability received from a peer with a particular code and an index. When a capability is received multiple times with different values during a BGP connection establishment, corresponding entries are differentiated with indices.')
cbgpPeerCapCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 64, 128))).clone(namedValues=NamedValues(("multiProtocol", 1), ("routeRefresh", 2), ("gracefulRestart", 64), ("routeRefreshOld", 128))))
if mibBuilder.loadTexts: cbgpPeerCapCode.setReference('RFC 2842, Capabilities Advertisement with BGP-4. RFC2818, Route Refresh Capability for BGP-4. RFC2858, Multiprotocol Extensions for BGP-4. draft-ietf-idr-restart-05.txt, Graceful Restart Mechanism for BGP')
if mibBuilder.loadTexts: cbgpPeerCapCode.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerCapCode.setDescription('The BGP Capability Advertisement Capability Code.')
cbgpPeerCapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: cbgpPeerCapIndex.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerCapIndex.setDescription('Multiple instances of a given capability may be sent by a BGP speaker. This variable is used to index them.')
cbgpPeerCapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerCapValue.setReference('RFC 2842, Capabilities Advertisement with BGP-4. RFC2818, Route Refresh Capability for BGP-4. RFC2858, Multiprotocol Extensions for BGP-4. draft-ietf-idr-restart-05.txt, Graceful Restart Mechanism for BGP')
if mibBuilder.loadTexts: cbgpPeerCapValue.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerCapValue.setDescription('The value of the announced capability. This MIB object value is organized as given below, Capability : Route Refresh Capability Null string Capability : Multiprotocol Extensions +----------------------------------+ | AFI(16 bits) | +----------------------------------+ | SAFI (8 bits) | +----------------------------------+ Capability : Graceful Restart +----------------------------------+ | Restart Flags (4 bits) | +----------------------------------+ | Restart Time in seconds (12 bits)| +----------------------------------+ | AFI(16 bits) | +----------------------------------+ | SAFI (8 bits) | +----------------------------------+ | Flags for Address Family (8 bits)| +----------------------------------+ | ... | +----------------------------------+ | AFI(16 bits) | +----------------------------------+ | SAFI (8 bits) | +----------------------------------+ | Flags for Address Family (8 bits)| +----------------------------------+')
cbgpPeerAddrFamilyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 3), )
if mibBuilder.loadTexts: cbgpPeerAddrFamilyTable.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerAddrFamilyTable.setDescription('This table contains information related to address families supported by a peer. Supported address families of a peer are known during BGP connection establishment. When a new supported address family is known, this table is updated with a new entry. When an address family is not supported any more, corresponding entry is deleted from the table.')
cbgpPeerAddrFamilyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 3, 1), ).setIndexNames((0, "BGP4-MIB", "bgpPeerRemoteAddr"), (0, "CISCO-BGP4-MIB", "cbgpPeerAddrFamilyAfi"), (0, "CISCO-BGP4-MIB", "cbgpPeerAddrFamilySafi"))
if mibBuilder.loadTexts: cbgpPeerAddrFamilyEntry.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerAddrFamilyEntry.setDescription('An entry is identified by an AFI/SAFI pair and peer address. It contains names associated with an address family.')
cbgpPeerAddrFamilyAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cbgpPeerAddrFamilyAfi.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerAddrFamilyAfi.setDescription('The AFI index of the entry. An implementation is only required to support IPv4 unicast and VPNv4 (Value - 1) address families.')
cbgpPeerAddrFamilySafi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 3, 1, 2), CbgpSafi())
if mibBuilder.loadTexts: cbgpPeerAddrFamilySafi.setReference('RFC-2858: Multiprotocol Extensions for BGP-4, RFC-2547: BGP/MPLS VPNs')
if mibBuilder.loadTexts: cbgpPeerAddrFamilySafi.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerAddrFamilySafi.setDescription('The SAFI index of the entry. An implementation is only required to support IPv4 unicast(Value - 1) and VPNv4( Value - 128) address families.')
cbgpPeerAddrFamilyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerAddrFamilyName.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerAddrFamilyName.setDescription('Implementation specific Address Family name.')
cbgpPeerAddrFamilyPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 4), )
if mibBuilder.loadTexts: cbgpPeerAddrFamilyPrefixTable.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerAddrFamilyPrefixTable.setDescription('This table contains prefix related information related to address families supported by a peer. Supported address families of a peer are known during BGP connection establishment. When a new supported address family is known, this table is updated with a new entry. When an address family is not supported any more, corresponding entry is deleted from the table.')
cbgpPeerAddrFamilyPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 4, 1), ).setIndexNames((0, "BGP4-MIB", "bgpPeerRemoteAddr"), (0, "CISCO-BGP4-MIB", "cbgpPeerAddrFamilyAfi"), (0, "CISCO-BGP4-MIB", "cbgpPeerAddrFamilySafi"))
if mibBuilder.loadTexts: cbgpPeerAddrFamilyPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerAddrFamilyPrefixEntry.setDescription('An entry is identified by an AFI/SAFI pair and peer address. It contains information associated with route prefixes belonging to an address family.')
cbgpPeerAcceptedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerAcceptedPrefixes.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerAcceptedPrefixes.setDescription('Number of accepted route prefixes on this connection, which belong to an address family.')
cbgpPeerDeniedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerDeniedPrefixes.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerDeniedPrefixes.setDescription('This counter is incremented when a route prefix, which belongs to an address family, received on this connection is denied. It is initialized to zero when the connection is undergone a hard reset.')
cbgpPeerPrefixAdminLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpPeerPrefixAdminLimit.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerPrefixAdminLimit.setDescription('Max number of route prefixes accepted for an address family on this connection.')
cbgpPeerPrefixThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpPeerPrefixThreshold.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerPrefixThreshold.setDescription('Prefix threshold value (%) for an address family on this connection at which warning message stating the prefix count is crossed the threshold or corresponding SNMP notification is generated.')
cbgpPeerPrefixClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerPrefixClearThreshold.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerPrefixClearThreshold.setDescription('Prefix threshold value (%) for an address family on this connection at which SNMP clear notification is generated if prefix threshold notification is already generated.')
cbgpPeerAdvertisedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerAdvertisedPrefixes.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerAdvertisedPrefixes.setDescription('This counter is incremented when a route prefix, which belongs to an address family is advertised on this connection. It is initialized to zero when the connection is undergone a hard reset.')
cbgpPeerSuppressedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerSuppressedPrefixes.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerSuppressedPrefixes.setDescription('This counter is incremented when a route prefix, which belongs to an address family is suppressed from being sent on this connection. It is initialized to zero when the connection is undergone a hard reset.')
cbgpPeerWithdrawnPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeerWithdrawnPrefixes.setStatus('current')
if mibBuilder.loadTexts: cbgpPeerWithdrawnPrefixes.setDescription('This counter is incremented when a route prefix, which belongs to an address family, is withdrawn on this connection. It is initialized to zero when the connection is undergone a hard reset.')
cbgpPeer2Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5), )
if mibBuilder.loadTexts: cbgpPeer2Table.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2Table.setDescription('BGP peer table. This table contains, one entry per BGP peer, information about the connections with BGP peers.')
cbgpPeer2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-BGP4-MIB", "cbgpPeer2Type"), (0, "CISCO-BGP4-MIB", "cbgpPeer2RemoteAddr"))
if mibBuilder.loadTexts: cbgpPeer2Entry.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2Entry.setDescription('Entry containing information about the connection with a BGP peer.')
cbgpPeer2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cbgpPeer2Type.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2Type.setDescription('Represents the type of Peer address stored in cbgpPeer2Entry.')
cbgpPeer2RemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 2), InetAddress())
if mibBuilder.loadTexts: cbgpPeer2RemoteAddr.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2RemoteAddr.setDescription("The remote IP address of this entry's BGP peer.")
cbgpPeer2State = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2State.setReference('RFC 4271, Section 8.2.2.')
if mibBuilder.loadTexts: cbgpPeer2State.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2State.setDescription('The BGP peer connection state.')
cbgpPeer2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpPeer2AdminStatus.setReference('RFC 4271, Section 8.1.2.')
if mibBuilder.loadTexts: cbgpPeer2AdminStatus.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2AdminStatus.setDescription("The desired state of the BGP connection. A transition from 'stop' to 'start' will cause the BGP Manual Start Event to be generated. A transition from 'start' to 'stop' will cause the BGP Manual Stop Event to be generated. This parameter can be used to restart BGP peer connections. Care should be used in providing write access to this object without adequate authentication.")
cbgpPeer2NegotiatedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2NegotiatedVersion.setReference('RFC 4271, Section 4.2. RFC 4271, Section 7.')
if mibBuilder.loadTexts: cbgpPeer2NegotiatedVersion.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2NegotiatedVersion.setDescription('The negotiated version of BGP running between the two peers. This entry MUST be zero (0) unless the cbgpPeer2State is in the openconfirm or the established state. Note that legal values for this object are between 0 and 255.')
cbgpPeer2LocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2LocalAddr.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2LocalAddr.setDescription("The local IP address of this entry's BGP connection.")
cbgpPeer2LocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2LocalPort.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2LocalPort.setDescription('The local port for the TCP connection between the BGP peers.')
cbgpPeer2LocalAs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 8), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2LocalAs.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2LocalAs.setDescription('The local AS number for this session.')
cbgpPeer2LocalIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2LocalIdentifier.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2LocalIdentifier.setDescription("The BGP Identifier of this entry's BGP peer.")
cbgpPeer2RemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 10), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2RemotePort.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2RemotePort.setDescription('The remote port for the TCP connection between the BGP peers. Note that the objects cbgpPeer2LocalAddr, cbgpPeer2LocalPort, cbgpPeer2RemoteAddr, and cbgpPeer2RemotePort provide the appropriate reference to the standard MIB TCP connection table.')
cbgpPeer2RemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 11), InetAutonomousSystemNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2RemoteAs.setReference('RFC 4271, Section 4.2.')
if mibBuilder.loadTexts: cbgpPeer2RemoteAs.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2RemoteAs.setDescription('The remote autonomous system number received in the BGP OPEN message.')
cbgpPeer2RemoteIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2RemoteIdentifier.setReference("RFC 4271, Section 4.2, 'BGP Identifier'.")
if mibBuilder.loadTexts: cbgpPeer2RemoteIdentifier.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2RemoteIdentifier.setDescription("The BGP Identifier of this entry's BGP peer. This entry MUST be 0.0.0.0 unless the cbgpPeer2State is in the openconfirm or the established state.")
cbgpPeer2InUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2InUpdates.setReference('RFC 4271, Section 4.3.')
if mibBuilder.loadTexts: cbgpPeer2InUpdates.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2InUpdates.setDescription('The number of BGP UPDATE messages received on this connection.')
cbgpPeer2OutUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2OutUpdates.setReference('RFC 4271, Section 4.3.')
if mibBuilder.loadTexts: cbgpPeer2OutUpdates.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2OutUpdates.setDescription('The number of BGP UPDATE messages transmitted on this connection.')
cbgpPeer2InTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2InTotalMessages.setReference('RFC 4271, Section 4.')
if mibBuilder.loadTexts: cbgpPeer2InTotalMessages.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2InTotalMessages.setDescription('The total number of messages received from the remote peer on this connection.')
cbgpPeer2OutTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2OutTotalMessages.setReference('RFC 4271, Section 4.')
if mibBuilder.loadTexts: cbgpPeer2OutTotalMessages.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2OutTotalMessages.setDescription('The total number of messages transmitted to the remote peer on this connection.')
cbgpPeer2LastError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2LastError.setReference('RFC 4271, Section 4.5.')
if mibBuilder.loadTexts: cbgpPeer2LastError.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2LastError.setDescription('The last error code and subcode seen by this peer on this connection. If no error has occurred, this field is zero. Otherwise, the first byte of this two byte OCTET STRING contains the error code, and the second byte contains the subcode.')
cbgpPeer2FsmEstablishedTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2FsmEstablishedTransitions.setReference('RFC 4271, Section 8.')
if mibBuilder.loadTexts: cbgpPeer2FsmEstablishedTransitions.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2FsmEstablishedTransitions.setDescription('The total number of times the BGP FSM transitioned into the established state for this peer.')
cbgpPeer2FsmEstablishedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 19), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2FsmEstablishedTime.setReference('RFC 4271, Section 8.')
if mibBuilder.loadTexts: cbgpPeer2FsmEstablishedTime.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2FsmEstablishedTime.setDescription('This timer indicates how long (in seconds) this peer has been in the established state or how long since this peer was last in the established state. It is set to zero when a new peer is configured or when the router is booted.')
cbgpPeer2ConnectRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpPeer2ConnectRetryInterval.setReference("RFC 4271, Section 8.2.2. This is the value used to initialize the 'ConnectRetryTimer'.")
if mibBuilder.loadTexts: cbgpPeer2ConnectRetryInterval.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2ConnectRetryInterval.setDescription('Time interval (in seconds) for the ConnectRetry timer. The suggested value for this timer is 120 seconds.')
cbgpPeer2HoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), ))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2HoldTime.setReference('RFC 4271, Section 4.2.')
if mibBuilder.loadTexts: cbgpPeer2HoldTime.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2HoldTime.setDescription('Time interval (in seconds) for the Hold Timer established with the peer. The value of this object is calculated by this BGP speaker, using the smaller of the values in cbgpPeer2HoldTimeConfigured and the Hold Time received in the OPEN message. This value must be at least three seconds if it is not zero (0). If the Hold Timer has not been established with the peer this object MUST have a value of zero (0). If the cbgpPeer2HoldTimeConfigured object has a value of (0), then this object MUST have a value of (0).')
cbgpPeer2KeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 21845), ))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2KeepAlive.setReference('RFC 4271, Section 4.4.')
if mibBuilder.loadTexts: cbgpPeer2KeepAlive.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2KeepAlive.setDescription('Time interval (in seconds) for the KeepAlive timer established with the peer. The value of this object is calculated by this BGP speaker such that, when compared with cbgpPeer2HoldTime, it has the same proportion that cbgpPeer2KeepAliveConfigured has, compared with cbgpPeer2HoldTimeConfigured. If the KeepAlive timer has not been established with the peer, this object MUST have a value of zero (0). If the of cbgpPeer2KeepAliveConfigured object has a value of (0), then this object MUST have a value of (0).')
cbgpPeer2HoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 65535), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpPeer2HoldTimeConfigured.setReference('RFC 4271, Section 4.2. RFC 4271, Section 10.')
if mibBuilder.loadTexts: cbgpPeer2HoldTimeConfigured.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2HoldTimeConfigured.setDescription('Time interval (in seconds) for the Hold Time configured for this BGP speaker with this peer. This value is placed in an OPEN message sent to this peer by this BGP speaker, and is compared with the Hold Time field in an OPEN message received from the peer when determining the Hold Time (cbgpPeer2HoldTime) with the peer. This value must not be less than three seconds if it is not zero (0). If it is zero (0), the Hold Time is NOT to be established with the peer. The suggested value for this timer is 90 seconds.')
cbgpPeer2KeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 21845), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpPeer2KeepAliveConfigured.setReference('RFC 4271, Section 4.4. RFC 4271, Section 10.')
if mibBuilder.loadTexts: cbgpPeer2KeepAliveConfigured.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2KeepAliveConfigured.setDescription("Time interval (in seconds) for the KeepAlive timer configured for this BGP speaker with this peer. The value of this object will only determine the KEEPALIVE messages' frequency relative to the value specified in cbgpPeer2HoldTimeConfigured; the actual time interval for the KEEPALIVE messages is indicated by cbgpPeer2KeepAlive. A reasonable maximum value for this timer would be one third of that of cbgpPeer2HoldTimeConfigured. If the value of this object is zero (0), no periodical KEEPALIVE messages are sent to the peer after the BGP connection has been established. The suggested value for this timer is 30 seconds.")
cbgpPeer2MinASOriginationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpPeer2MinASOriginationInterval.setReference('RFC 4271, Section 9.2.1.2. RFC 4271, Section 10.')
if mibBuilder.loadTexts: cbgpPeer2MinASOriginationInterval.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2MinASOriginationInterval.setDescription('Time interval (in seconds) for the MinASOriginationInterval timer. The suggested value for this timer is 15 seconds.')
cbgpPeer2MinRouteAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpPeer2MinRouteAdvertisementInterval.setReference('RFC 4271, Section 9.2.1.1. RFC 4271, Section 10.')
if mibBuilder.loadTexts: cbgpPeer2MinRouteAdvertisementInterval.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2MinRouteAdvertisementInterval.setDescription('Time interval (in seconds) for the MinRouteAdvertisementInterval timer. The suggested value for this timer is 30 seconds for EBGP connections and 5 seconds for IBGP connections.')
cbgpPeer2InUpdateElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 27), Gauge32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2InUpdateElapsedTime.setReference('RFC 4271, Section 4.3. RFC 4271, Section 8.2.2, Established state.')
if mibBuilder.loadTexts: cbgpPeer2InUpdateElapsedTime.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2InUpdateElapsedTime.setDescription('Elapsed time (in seconds) since the last BGP UPDATE message was received from the peer. Each time cbgpPeer2InUpdates is incremented, the value of this object is set to zero (0).')
cbgpPeer2LastErrorTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 28), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2LastErrorTxt.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2LastErrorTxt.setDescription('Implementation specific error description for bgpPeerLastErrorReceived.')
cbgpPeer2PrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2PrevState.setReference('RFC 1771, Section 8, A Border Gateway Protocol 4 (BGP-4).')
if mibBuilder.loadTexts: cbgpPeer2PrevState.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2PrevState.setDescription('The BGP peer connection previous state.')
cbgpPeer2CapsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 6), )
if mibBuilder.loadTexts: cbgpPeer2CapsTable.setReference('RFC 2842, Capabilities Advertisement with BGP-4. RFC 2818, Route Refresh Capability for BGP-4. RFC 2858, Multiprotocol Extensions for BGP-4. RFC 4724, Graceful Restart Mechanism for BGP. RFC 4893, BGP Support for Four-octet AS Number Space. draft-ietf-idr-add-paths-04.txt, Advertisement of Multiple Paths in BGP.')
if mibBuilder.loadTexts: cbgpPeer2CapsTable.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2CapsTable.setDescription('This table contains the capabilities that are supported by a peer. Capabilities of a peer are received during BGP connection establishment. Values corresponding to each received capability are stored in this table. When a new capability is received, this table is updated with a new entry. When an existing capability is not received during the latest connection establishment, the corresponding entry is deleted from the table.')
cbgpPeer2CapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-BGP4-MIB", "cbgpPeer2Type"), (0, "CISCO-BGP4-MIB", "cbgpPeer2RemoteAddr"), (0, "CISCO-BGP4-MIB", "cbgpPeer2CapCode"), (0, "CISCO-BGP4-MIB", "cbgpPeer2CapIndex"))
if mibBuilder.loadTexts: cbgpPeer2CapsEntry.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2CapsEntry.setDescription('Each entry represents a capability received from a peer with a particular code and an index. When a capability is received multiple times with different values during a BGP connection establishment, corresponding entries are differentiated with indices.')
cbgpPeer2CapCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 64, 65, 69, 128))).clone(namedValues=NamedValues(("multiProtocol", 1), ("routeRefresh", 2), ("gracefulRestart", 64), ("fourByteAs", 65), ("addPath", 69), ("routeRefreshOld", 128))))
if mibBuilder.loadTexts: cbgpPeer2CapCode.setReference('RFC 2842, Capabilities Advertisement with BGP-4. RFC 2818, Route Refresh Capability for BGP-4. RFC 2858, Multiprotocol Extensions for BGP-4. RFC 4724, Graceful Restart Mechanism for BGP. RFC 4893, BGP Support for Four-octet AS Number Space. draft-ietf-idr-add-paths-04.txt, Advertisement of Multiple Paths in BGP.')
if mibBuilder.loadTexts: cbgpPeer2CapCode.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2CapCode.setDescription('The BGP Capability Advertisement Capability Code.')
cbgpPeer2CapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: cbgpPeer2CapIndex.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2CapIndex.setDescription('Multiple instances of a given capability may be sent by a BGP speaker. This variable is used to index them.')
cbgpPeer2CapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2CapValue.setReference('RFC 2842, Capabilities Advertisement with BGP-4. RFC 2818, Route Refresh Capability for BGP-4. RFC 2858, Multiprotocol Extensions for BGP-4. RFC 4724, Graceful Restart Mechanism for BGP. RFC 4893, BGP Support for Four-octet AS Number Space. draft-ietf-idr-add-paths-04.txt, Advertisement of Multiple Paths in BGP.')
if mibBuilder.loadTexts: cbgpPeer2CapValue.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2CapValue.setDescription('The value of the announced capability. This MIB object value is organized as given below, Capability : Route Refresh Capability 4-Byte AS Capability Null string Capability : Multiprotocol Extensions +----------------------------------+ | AFI(16 bits) | +----------------------------------+ | SAFI (8 bits) | +----------------------------------+ Capability : Graceful Restart +----------------------------------+ | Restart Flags (4 bits) | +----------------------------------+ | Restart Time in seconds (12 bits)| +----------------------------------+ | AFI(16 bits) | +----------------------------------+ | SAFI (8 bits) | +----------------------------------+ | Flags for Address Family (8 bits)| +----------------------------------+ | ... | +----------------------------------+ | AFI(16 bits) | +----------------------------------+ | SAFI (8 bits) | +----------------------------------+ | Flags for Address Family (8 bits)| +----------------------------------+ Capability : Additional Paths +----------------------------------+ | AFI(16 bits) | +----------------------------------+ | SAFI (8 bits) | +----------------------------------+ | Send/Receive (8 bits) | +----------------------------------+')
cbgpPeer2AddrFamilyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 7), )
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyTable.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyTable.setDescription('This table contains information related to address families supported by a peer. Supported address families of a peer are known during BGP connection establishment. When a new supported address family is known, this table is updated with a new entry. When an address family is not supported any more, corresponding entry is deleted from the table.')
cbgpPeer2AddrFamilyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 7, 1), ).setIndexNames((0, "CISCO-BGP4-MIB", "cbgpPeer2Type"), (0, "CISCO-BGP4-MIB", "cbgpPeer2RemoteAddr"), (0, "CISCO-BGP4-MIB", "cbgpPeer2AddrFamilyAfi"), (0, "CISCO-BGP4-MIB", "cbgpPeer2AddrFamilySafi"))
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyEntry.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyEntry.setDescription('An entry is identified by an AFI/SAFI pair and peer address. It contains names associated with an address family.')
cbgpPeer2AddrFamilyAfi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyAfi.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyAfi.setDescription('The AFI index of the entry. An implementation is only required to support IPv4 unicast and VPNv4 (Value - 1) address families.')
cbgpPeer2AddrFamilySafi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 7, 1, 2), CbgpSafi())
if mibBuilder.loadTexts: cbgpPeer2AddrFamilySafi.setReference('RFC 2858, Multiprotocol Extensions for BGP-4. RFC 2547, BGP/MPLS VPNs.')
if mibBuilder.loadTexts: cbgpPeer2AddrFamilySafi.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2AddrFamilySafi.setDescription('The SAFI index of the entry. An implementation is only required to support IPv4 unicast(Value - 1) and VPNv4( Value - 128) address families.')
cbgpPeer2AddrFamilyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 7, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyName.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyName.setDescription('Implementation specific Address Family name.')
cbgpPeer2AddrFamilyPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 8), )
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyPrefixTable.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyPrefixTable.setDescription('This table contains prefix related information related to address families supported by a peer. Supported address families of a peer are known during BGP connection establishment. When a new supported address family is known, this table is updated with a new entry. When an address family is not supported any more, corresponding entry is deleted from the table.')
cbgpPeer2AddrFamilyPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 8, 1), ).setIndexNames((0, "CISCO-BGP4-MIB", "cbgpPeer2Type"), (0, "CISCO-BGP4-MIB", "cbgpPeer2RemoteAddr"), (0, "CISCO-BGP4-MIB", "cbgpPeer2AddrFamilyAfi"), (0, "CISCO-BGP4-MIB", "cbgpPeer2AddrFamilySafi"))
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2AddrFamilyPrefixEntry.setDescription('An entry is identified by an AFI/SAFI pair and peer address. It contains information associated with route prefixes belonging to an address family.')
cbgpPeer2AcceptedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2AcceptedPrefixes.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2AcceptedPrefixes.setDescription('Number of accepted route prefixes on this connection, which belong to an address family.')
cbgpPeer2DeniedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 8, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2DeniedPrefixes.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2DeniedPrefixes.setDescription('This counter is incremented when a route prefix, which belongs to an address family, received on this connection is denied. It is initialized to zero when the connection is undergone a hard reset.')
cbgpPeer2PrefixAdminLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpPeer2PrefixAdminLimit.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2PrefixAdminLimit.setDescription('Max number of route prefixes accepted for an address family on this connection.')
cbgpPeer2PrefixThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbgpPeer2PrefixThreshold.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2PrefixThreshold.setDescription('Prefix threshold value (%) for an address family on this connection at which warning message stating the prefix count is crossed the threshold or corresponding SNMP notification is generated.')
cbgpPeer2PrefixClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2PrefixClearThreshold.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2PrefixClearThreshold.setDescription('Prefix threshold value (%) for an address family on this connection at which SNMP clear notification is generated if prefix threshold notification is already generated.')
cbgpPeer2AdvertisedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 8, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2AdvertisedPrefixes.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2AdvertisedPrefixes.setDescription('This counter is incremented when a route prefix, which belongs to an address family is advertised on this connection. It is initialized to zero when the connection is undergone a hard reset.')
cbgpPeer2SuppressedPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2SuppressedPrefixes.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2SuppressedPrefixes.setDescription('This counter is incremented when a route prefix, which belongs to an address family is suppressed from being sent on this connection. It is initialized to zero when the connection is undergone a hard reset.')
cbgpPeer2WithdrawnPrefixes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 187, 1, 2, 8, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbgpPeer2WithdrawnPrefixes.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2WithdrawnPrefixes.setDescription('This counter is incremented when a route prefix, which belongs to an address family, is withdrawn on this connection. It is initialized to zero when the connection is undergone a hard reset.')
ciscoBgp4NotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 187, 0))
cbgpFsmStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 187, 0, 1)).setObjects(("BGP4-MIB", "bgpPeerLastError"), ("BGP4-MIB", "bgpPeerState"), ("CISCO-BGP4-MIB", "cbgpPeerLastErrorTxt"), ("CISCO-BGP4-MIB", "cbgpPeerPrevState"))
if mibBuilder.loadTexts: cbgpFsmStateChange.setStatus('current')
if mibBuilder.loadTexts: cbgpFsmStateChange.setDescription('The BGP cbgpFsmStateChange notification is generated for every BGP FSM state change. The bgpPeerRemoteAddr value is attached to the notification object ID.')
cbgpBackwardTransition = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 187, 0, 2)).setObjects(("BGP4-MIB", "bgpPeerLastError"), ("BGP4-MIB", "bgpPeerState"), ("CISCO-BGP4-MIB", "cbgpPeerLastErrorTxt"), ("CISCO-BGP4-MIB", "cbgpPeerPrevState"))
if mibBuilder.loadTexts: cbgpBackwardTransition.setStatus('current')
if mibBuilder.loadTexts: cbgpBackwardTransition.setDescription('The cbgpBackwardTransition Event is generated when the BGP FSM moves from a higher numbered state to a lower numbered state. The bgpPeerRemoteAddr value is attached to the notification object ID.')
cbgpPrefixThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 187, 0, 3)).setObjects(("CISCO-BGP4-MIB", "cbgpPeerPrefixAdminLimit"), ("CISCO-BGP4-MIB", "cbgpPeerPrefixThreshold"))
if mibBuilder.loadTexts: cbgpPrefixThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: cbgpPrefixThresholdExceeded.setDescription('The cbgpPrefixThresholdExceeded notification is generated when prefix count exceeds the configured warning threshold on a session for an address family. The bgpPeerRemoteAddr, cbgpPeerAddrFamilyAfi and cbgpPeerAddrFamilySafi values are attached to the notification object ID.')
cbgpPrefixThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 187, 0, 4)).setObjects(("CISCO-BGP4-MIB", "cbgpPeerPrefixAdminLimit"), ("CISCO-BGP4-MIB", "cbgpPeerPrefixClearThreshold"))
if mibBuilder.loadTexts: cbgpPrefixThresholdClear.setStatus('current')
if mibBuilder.loadTexts: cbgpPrefixThresholdClear.setDescription("The cbgpPrefixThresholdClear notification is generated when prefix count drops below the configured clear threshold on a session for an address family once cbgpPrefixThresholdExceeded is generated. This won't be generated if the peer session goes down after the generation of cbgpPrefixThresholdExceeded. The bgpPeerRemoteAddr, cbgpPeerAddrFamilyAfi and cbgpPeerAddrFamilySafi values are attached to the notification object ID.")
cbgpPeer2EstablishedNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 187, 0, 5)).setObjects(("CISCO-BGP4-MIB", "cbgpPeer2LastError"), ("CISCO-BGP4-MIB", "cbgpPeer2State"))
if mibBuilder.loadTexts: cbgpPeer2EstablishedNotification.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2EstablishedNotification.setDescription('The cbgpPeer2EstablishedNotification notification is generated when the BGP FSM enters the established state.')
cbgpPeer2BackwardTransNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 187, 0, 6)).setObjects(("CISCO-BGP4-MIB", "cbgpPeer2LastError"), ("CISCO-BGP4-MIB", "cbgpPeer2State"))
if mibBuilder.loadTexts: cbgpPeer2BackwardTransNotification.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2BackwardTransNotification.setDescription('The cbgpPeer2BackwardTransNotification notification is generated when the BGP FSM moves from a higher numbered state to a lower numbered state.')
cbgpPeer2FsmStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 187, 0, 7)).setObjects(("CISCO-BGP4-MIB", "cbgpPeer2LastError"), ("CISCO-BGP4-MIB", "cbgpPeer2State"), ("CISCO-BGP4-MIB", "cbgpPeer2LastErrorTxt"), ("CISCO-BGP4-MIB", "cbgpPeer2PrevState"))
if mibBuilder.loadTexts: cbgpPeer2FsmStateChange.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2FsmStateChange.setDescription('The cbgpPeer2FsmStateChange notification is generated for every BGP FSM state change.')
cbgpPeer2BackwardTransition = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 187, 0, 8)).setObjects(("CISCO-BGP4-MIB", "cbgpPeer2LastError"), ("CISCO-BGP4-MIB", "cbgpPeer2State"), ("CISCO-BGP4-MIB", "cbgpPeer2LastErrorTxt"), ("CISCO-BGP4-MIB", "cbgpPeer2PrevState"))
if mibBuilder.loadTexts: cbgpPeer2BackwardTransition.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2BackwardTransition.setDescription('The cbgpPeer2BackwardTransition notification is generated when the BGP FSM moves from a higher numbered state to a lower numbered state.')
cbgpPeer2PrefixThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 187, 0, 9)).setObjects(("CISCO-BGP4-MIB", "cbgpPeer2PrefixAdminLimit"), ("CISCO-BGP4-MIB", "cbgpPeer2PrefixThreshold"))
if mibBuilder.loadTexts: cbgpPeer2PrefixThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2PrefixThresholdExceeded.setDescription('The cbgpPeer2PrefixThresholdExceeded notification is generated when prefix count exceeds the configured warning threshold on a session for an address family.')
cbgpPeer2PrefixThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 187, 0, 10)).setObjects(("CISCO-BGP4-MIB", "cbgpPeer2PrefixAdminLimit"), ("CISCO-BGP4-MIB", "cbgpPeer2PrefixClearThreshold"))
if mibBuilder.loadTexts: cbgpPeer2PrefixThresholdClear.setStatus('current')
if mibBuilder.loadTexts: cbgpPeer2PrefixThresholdClear.setDescription('The cbgpPeer2PrefixThresholdClear notification is generated when prefix count drops below the configured clear threshold on a session for an address family once cbgpPeer2PrefixThresholdExceeded is generated. This will not be generated if the peer session goes down after the generation of cbgpPrefixThresholdExceeded.')
ciscoBgp4NotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 187, 2))
ciscoBgp4MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 187, 3))
ciscoBgp4MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 1))
ciscoBgp4MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 2))
ciscoBgp4MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 1, 1)).setObjects(("CISCO-BGP4-MIB", "ciscoBgp4RouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4MIBCompliance = ciscoBgp4MIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoBgp4MIBCompliance.setDescription('The compliance statement for entities which implement the Cisco BGP4 MIB')
ciscoBgp4MIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 1, 2)).setObjects(("CISCO-BGP4-MIB", "ciscoBgp4RouteGroup"), ("CISCO-BGP4-MIB", "ciscoBgp4PeerGroup"), ("CISCO-BGP4-MIB", "ciscoBgp4NotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4MIBComplianceRev1 = ciscoBgp4MIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoBgp4MIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco BGP4 MIB')
ciscoBgp4MIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 1, 3)).setObjects(("CISCO-BGP4-MIB", "ciscoBgp4RouteGroup"), ("CISCO-BGP4-MIB", "ciscoBgp4PeerGroup1"), ("CISCO-BGP4-MIB", "ciscoBgp4NotificationsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4MIBComplianceRev2 = ciscoBgp4MIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoBgp4MIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco BGP4 MIB')
ciscoBgp4MIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 1, 4)).setObjects(("CISCO-BGP4-MIB", "ciscoBgp4RouteGroup"), ("CISCO-BGP4-MIB", "ciscoBgp4PeerGroup1"), ("CISCO-BGP4-MIB", "ciscoBgp4GlobalGroup"), ("CISCO-BGP4-MIB", "ciscoBgp4NotificationsGroup1"), ("CISCO-BGP4-MIB", "ciscoBgp4Peer2Group"), ("CISCO-BGP4-MIB", "ciscoBgp4Peer2NotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4MIBComplianceRev3 = ciscoBgp4MIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoBgp4MIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco BGP4 MIB')
ciscoBgp4RouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 2, 1)).setObjects(("CISCO-BGP4-MIB", "cbgpRouteOrigin"), ("CISCO-BGP4-MIB", "cbgpRouteASPathSegment"), ("CISCO-BGP4-MIB", "cbgpRouteNextHop"), ("CISCO-BGP4-MIB", "cbgpRouteMedPresent"), ("CISCO-BGP4-MIB", "cbgpRouteMultiExitDisc"), ("CISCO-BGP4-MIB", "cbgpRouteLocalPrefPresent"), ("CISCO-BGP4-MIB", "cbgpRouteLocalPref"), ("CISCO-BGP4-MIB", "cbgpRouteAtomicAggregate"), ("CISCO-BGP4-MIB", "cbgpRouteAggregatorAS"), ("CISCO-BGP4-MIB", "cbgpRouteAggregatorAddrType"), ("CISCO-BGP4-MIB", "cbgpRouteAggregatorAddr"), ("CISCO-BGP4-MIB", "cbgpRouteBest"), ("CISCO-BGP4-MIB", "cbgpRouteUnknownAttr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4RouteGroup = ciscoBgp4RouteGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoBgp4RouteGroup.setDescription('A collection of objects providing information about routes received by BGP speaker.')
ciscoBgp4PeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 2, 2)).setObjects(("CISCO-BGP4-MIB", "cbgpPeerPrefixAccepted"), ("CISCO-BGP4-MIB", "cbgpPeerPrefixDenied"), ("CISCO-BGP4-MIB", "cbgpPeerPrefixLimit"), ("CISCO-BGP4-MIB", "cbgpPeerPrefixAdvertised"), ("CISCO-BGP4-MIB", "cbgpPeerPrefixSuppressed"), ("CISCO-BGP4-MIB", "cbgpPeerPrefixWithdrawn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4PeerGroup = ciscoBgp4PeerGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoBgp4PeerGroup.setDescription('A collection of objects providing information about routes received by BGP speaker.')
ciscoBgp4NotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 2, 3)).setObjects(("CISCO-BGP4-MIB", "cbgpFsmStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4NotificationsGroup = ciscoBgp4NotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoBgp4NotificationsGroup.setDescription('The collection of notifications related to BGP.')
ciscoBgp4PeerGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 2, 4)).setObjects(("CISCO-BGP4-MIB", "cbgpPeerPrevState"), ("CISCO-BGP4-MIB", "cbgpPeerLastErrorTxt"), ("CISCO-BGP4-MIB", "cbgpPeerCapValue"), ("CISCO-BGP4-MIB", "cbgpPeerAddrFamilyName"), ("CISCO-BGP4-MIB", "cbgpPeerAcceptedPrefixes"), ("CISCO-BGP4-MIB", "cbgpPeerDeniedPrefixes"), ("CISCO-BGP4-MIB", "cbgpPeerPrefixAdminLimit"), ("CISCO-BGP4-MIB", "cbgpPeerPrefixThreshold"), ("CISCO-BGP4-MIB", "cbgpPeerPrefixClearThreshold"), ("CISCO-BGP4-MIB", "cbgpPeerAdvertisedPrefixes"), ("CISCO-BGP4-MIB", "cbgpPeerSuppressedPrefixes"), ("CISCO-BGP4-MIB", "cbgpPeerWithdrawnPrefixes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4PeerGroup1 = ciscoBgp4PeerGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoBgp4PeerGroup1.setDescription('A collection of objects providing information about a BGP peer.')
ciscoBgp4NotificationsGroup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 2, 5)).setObjects(("CISCO-BGP4-MIB", "cbgpFsmStateChange"), ("CISCO-BGP4-MIB", "cbgpBackwardTransition"), ("CISCO-BGP4-MIB", "cbgpPrefixThresholdExceeded"), ("CISCO-BGP4-MIB", "cbgpPrefixThresholdClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4NotificationsGroup1 = ciscoBgp4NotificationsGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoBgp4NotificationsGroup1.setDescription('The collection of notifications related to BGP.')
ciscoBgp4Peer2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 2, 6)).setObjects(("CISCO-BGP4-MIB", "cbgpPeer2State"), ("CISCO-BGP4-MIB", "cbgpPeer2AdminStatus"), ("CISCO-BGP4-MIB", "cbgpPeer2NegotiatedVersion"), ("CISCO-BGP4-MIB", "cbgpPeer2LocalAddr"), ("CISCO-BGP4-MIB", "cbgpPeer2LocalPort"), ("CISCO-BGP4-MIB", "cbgpPeer2LocalAs"), ("CISCO-BGP4-MIB", "cbgpPeer2LocalIdentifier"), ("CISCO-BGP4-MIB", "cbgpPeer2RemotePort"), ("CISCO-BGP4-MIB", "cbgpPeer2RemoteAs"), ("CISCO-BGP4-MIB", "cbgpPeer2RemoteIdentifier"), ("CISCO-BGP4-MIB", "cbgpPeer2InUpdates"), ("CISCO-BGP4-MIB", "cbgpPeer2OutUpdates"), ("CISCO-BGP4-MIB", "cbgpPeer2InTotalMessages"), ("CISCO-BGP4-MIB", "cbgpPeer2OutTotalMessages"), ("CISCO-BGP4-MIB", "cbgpPeer2LastError"), ("CISCO-BGP4-MIB", "cbgpPeer2FsmEstablishedTransitions"), ("CISCO-BGP4-MIB", "cbgpPeer2FsmEstablishedTime"), ("CISCO-BGP4-MIB", "cbgpPeer2ConnectRetryInterval"), ("CISCO-BGP4-MIB", "cbgpPeer2HoldTime"), ("CISCO-BGP4-MIB", "cbgpPeer2KeepAlive"), ("CISCO-BGP4-MIB", "cbgpPeer2HoldTimeConfigured"), ("CISCO-BGP4-MIB", "cbgpPeer2KeepAliveConfigured"), ("CISCO-BGP4-MIB", "cbgpPeer2MinASOriginationInterval"), ("CISCO-BGP4-MIB", "cbgpPeer2MinRouteAdvertisementInterval"), ("CISCO-BGP4-MIB", "cbgpPeer2InUpdateElapsedTime"), ("CISCO-BGP4-MIB", "cbgpPeer2LastErrorTxt"), ("CISCO-BGP4-MIB", "cbgpPeer2PrevState"), ("CISCO-BGP4-MIB", "cbgpPeer2CapValue"), ("CISCO-BGP4-MIB", "cbgpPeer2AddrFamilyName"), ("CISCO-BGP4-MIB", "cbgpPeer2AcceptedPrefixes"), ("CISCO-BGP4-MIB", "cbgpPeer2DeniedPrefixes"), ("CISCO-BGP4-MIB", "cbgpPeer2PrefixAdminLimit"), ("CISCO-BGP4-MIB", "cbgpPeer2PrefixThreshold"), ("CISCO-BGP4-MIB", "cbgpPeer2PrefixClearThreshold"), ("CISCO-BGP4-MIB", "cbgpPeer2AdvertisedPrefixes"), ("CISCO-BGP4-MIB", "cbgpPeer2SuppressedPrefixes"), ("CISCO-BGP4-MIB", "cbgpPeer2WithdrawnPrefixes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4Peer2Group = ciscoBgp4Peer2Group.setStatus('current')
if mibBuilder.loadTexts: ciscoBgp4Peer2Group.setDescription('A collection of objects providing information about a BGP peer.')
ciscoBgp4Peer2NotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 2, 7)).setObjects(("CISCO-BGP4-MIB", "cbgpPeer2EstablishedNotification"), ("CISCO-BGP4-MIB", "cbgpPeer2BackwardTransNotification"), ("CISCO-BGP4-MIB", "cbgpPeer2FsmStateChange"), ("CISCO-BGP4-MIB", "cbgpPeer2BackwardTransition"), ("CISCO-BGP4-MIB", "cbgpPeer2PrefixThresholdExceeded"), ("CISCO-BGP4-MIB", "cbgpPeer2PrefixThresholdClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4Peer2NotificationsGroup = ciscoBgp4Peer2NotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoBgp4Peer2NotificationsGroup.setDescription('A collection of notifications related to BGP.')
ciscoBgp4GlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 187, 3, 2, 8)).setObjects(("CISCO-BGP4-MIB", "cbgpNotifsEnable"), ("CISCO-BGP4-MIB", "cbgpLocalAs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoBgp4GlobalGroup = ciscoBgp4GlobalGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoBgp4GlobalGroup.setDescription('A collection of global objects related to BGP.')
mibBuilder.exportSymbols("CISCO-BGP4-MIB", cbgpPeer2LocalIdentifier=cbgpPeer2LocalIdentifier, cbgpPeer2RemoteAs=cbgpPeer2RemoteAs, cbgpPeer2AdvertisedPrefixes=cbgpPeer2AdvertisedPrefixes, ciscoBgp4GlobalGroup=ciscoBgp4GlobalGroup, cbgpPeerPrefixAdminLimit=cbgpPeerPrefixAdminLimit, cbgpBackwardTransition=cbgpBackwardTransition, cbgpRouteEntry=cbgpRouteEntry, cbgpPeer2LastError=cbgpPeer2LastError, cbgpPeer2OutUpdates=cbgpPeer2OutUpdates, cbgpPeer2AcceptedPrefixes=cbgpPeer2AcceptedPrefixes, ciscoBgp4NotificationsGroup=ciscoBgp4NotificationsGroup, cbgpPeerPrefixWithdrawn=cbgpPeerPrefixWithdrawn, cbgpPeer2LocalAs=cbgpPeer2LocalAs, cbgpPeerPrefixThreshold=cbgpPeerPrefixThreshold, cbgpPeer2NegotiatedVersion=cbgpPeer2NegotiatedVersion, cbgpPeer2AddrFamilyPrefixTable=cbgpPeer2AddrFamilyPrefixTable, ciscoBgp4NotifyPrefix=ciscoBgp4NotifyPrefix, cbgpPeer2AdminStatus=cbgpPeer2AdminStatus, cbgpLocalAs=cbgpLocalAs, ciscoBgp4MIBObjects=ciscoBgp4MIBObjects, ciscoBgp4MIBGroups=ciscoBgp4MIBGroups, ciscoBgp4NotificationsGroup1=ciscoBgp4NotificationsGroup1, cbgpPeer2InTotalMessages=cbgpPeer2InTotalMessages, cbgpPeerAddrFamilyAfi=cbgpPeerAddrFamilyAfi, cbgpPeer2AddrFamilyEntry=cbgpPeer2AddrFamilyEntry, cbgpPeer2EstablishedNotification=cbgpPeer2EstablishedNotification, cbgpPeerPrefixClearThreshold=cbgpPeerPrefixClearThreshold, cbgpPeer2AddrFamilyAfi=cbgpPeer2AddrFamilyAfi, cbgpPeer2RemoteIdentifier=cbgpPeer2RemoteIdentifier, cbgpNotifsEnable=cbgpNotifsEnable, cbgpRouteSafi=cbgpRouteSafi, cbgpPeer2KeepAliveConfigured=cbgpPeer2KeepAliveConfigured, cbgpPeerAcceptedPrefixes=cbgpPeerAcceptedPrefixes, cbgpRouteAggregatorAddr=cbgpRouteAggregatorAddr, ciscoBgp4PeerGroup=ciscoBgp4PeerGroup, cbgpPeer2AddrFamilyPrefixEntry=cbgpPeer2AddrFamilyPrefixEntry, cbgpPeer2CapCode=cbgpPeer2CapCode, ciscoBgp4MIBComplianceRev3=ciscoBgp4MIBComplianceRev3, cbgpPeerPrefixAdvertised=cbgpPeerPrefixAdvertised, cbgpPeerTable=cbgpPeerTable, ciscoBgp4MIB=ciscoBgp4MIB, cbgpPeer2PrefixAdminLimit=cbgpPeer2PrefixAdminLimit, ciscoBgp4Peer2Group=ciscoBgp4Peer2Group, cbgpRouteLocalPref=cbgpRouteLocalPref, cbgpPeerAddrFamilyEntry=cbgpPeerAddrFamilyEntry, cbgpPeer2FsmEstablishedTransitions=cbgpPeer2FsmEstablishedTransitions, ciscoBgp4MIBComplianceRev2=ciscoBgp4MIBComplianceRev2, cbgpPeer2InUpdateElapsedTime=cbgpPeer2InUpdateElapsedTime, cbgpGlobal=cbgpGlobal, cbgpRouteAddrPrefix=cbgpRouteAddrPrefix, PYSNMP_MODULE_ID=ciscoBgp4MIB, cbgpPeerPrefixAccepted=cbgpPeerPrefixAccepted, ciscoBgp4MIBConformance=ciscoBgp4MIBConformance, cbgpPeerAddrFamilyName=cbgpPeerAddrFamilyName, cbgpPeer2FsmStateChange=cbgpPeer2FsmStateChange, ciscoBgp4Peer2NotificationsGroup=ciscoBgp4Peer2NotificationsGroup, cbgpRouteOrigin=cbgpRouteOrigin, cbgpPeer2FsmEstablishedTime=cbgpPeer2FsmEstablishedTime, cbgpPrefixThresholdExceeded=cbgpPrefixThresholdExceeded, cbgpPeerAddrFamilyTable=cbgpPeerAddrFamilyTable, cbgpPrefixThresholdClear=cbgpPrefixThresholdClear, cbgpPeer2AddrFamilyTable=cbgpPeer2AddrFamilyTable, cbgpPeerPrefixDenied=cbgpPeerPrefixDenied, cbgpPeer2LocalAddr=cbgpPeer2LocalAddr, cbgpPeerPrefixSuppressed=cbgpPeerPrefixSuppressed, cbgpPeer2Entry=cbgpPeer2Entry, cbgpPeer2LastErrorTxt=cbgpPeer2LastErrorTxt, cbgpPeerAddrFamilyPrefixEntry=cbgpPeerAddrFamilyPrefixEntry, cbgpPeer2PrefixThresholdClear=cbgpPeer2PrefixThresholdClear, cbgpRouteNextHop=cbgpRouteNextHop, ciscoBgp4MIBComplianceRev1=ciscoBgp4MIBComplianceRev1, cbgpPeer2MinASOriginationInterval=cbgpPeer2MinASOriginationInterval, cbgpRouteTable=cbgpRouteTable, cbgpPeer2CapsEntry=cbgpPeer2CapsEntry, cbgpPeer2MinRouteAdvertisementInterval=cbgpPeer2MinRouteAdvertisementInterval, cbgpPeerCapCode=cbgpPeerCapCode, CbgpSafi=CbgpSafi, cbgpPeer2Table=cbgpPeer2Table, cbgpPeerAddrFamilySafi=cbgpPeerAddrFamilySafi, cbgpRoutePeer=cbgpRoutePeer, cbgpRouteAggregatorAddrType=cbgpRouteAggregatorAddrType, ciscoBgp4RouteGroup=ciscoBgp4RouteGroup, cbgpPeerAddrFamilyPrefixTable=cbgpPeerAddrFamilyPrefixTable, cbgpPeer2SuppressedPrefixes=cbgpPeer2SuppressedPrefixes, cbgpPeer2CapValue=cbgpPeer2CapValue, cbgpPeer2RemoteAddr=cbgpPeer2RemoteAddr, cbgpPeerEntry=cbgpPeerEntry, CbgpNetworkAddress=CbgpNetworkAddress, cbgpPeer2PrevState=cbgpPeer2PrevState, cbgpPeer2PrefixThresholdExceeded=cbgpPeer2PrefixThresholdExceeded, cbgpFsmStateChange=cbgpFsmStateChange, cbgpPeer2HoldTime=cbgpPeer2HoldTime, cbgpRouteAggregatorAS=cbgpRouteAggregatorAS, cbgpPeer2WithdrawnPrefixes=cbgpPeer2WithdrawnPrefixes, cbgpRouteMultiExitDisc=cbgpRouteMultiExitDisc, ciscoBgp4MIBCompliance=ciscoBgp4MIBCompliance, cbgpPeer2LocalPort=cbgpPeer2LocalPort, cbgpRouteUnknownAttr=cbgpRouteUnknownAttr, cbgpRouteASPathSegment=cbgpRouteASPathSegment, cbgpPeerPrevState=cbgpPeerPrevState, cbgpRouteMedPresent=cbgpRouteMedPresent, cbgpPeerPrefixLimit=cbgpPeerPrefixLimit, cbgpPeer2OutTotalMessages=cbgpPeer2OutTotalMessages, cbgpPeer2AddrFamilyName=cbgpPeer2AddrFamilyName, cbgpPeerSuppressedPrefixes=cbgpPeerSuppressedPrefixes, cbgpPeer2KeepAlive=cbgpPeer2KeepAlive, cbgpPeerDeniedPrefixes=cbgpPeerDeniedPrefixes, cbgpPeer2CapIndex=cbgpPeer2CapIndex, cbgpPeerCapsEntry=cbgpPeerCapsEntry, cbgpRouteBest=cbgpRouteBest, cbgpPeer2DeniedPrefixes=cbgpPeer2DeniedPrefixes, cbgpRouteAfi=cbgpRouteAfi, cbgpPeerCapValue=cbgpPeerCapValue, cbgpRouteAddrPrefixLen=cbgpRouteAddrPrefixLen, cbgpPeer2AddrFamilySafi=cbgpPeer2AddrFamilySafi, cbgpPeer=cbgpPeer, cbgpPeer2State=cbgpPeer2State, cbgpPeer2HoldTimeConfigured=cbgpPeer2HoldTimeConfigured, cbgpPeer2PrefixThreshold=cbgpPeer2PrefixThreshold, cbgpPeerCapsTable=cbgpPeerCapsTable, cbgpPeer2CapsTable=cbgpPeer2CapsTable, cbgpPeer2BackwardTransNotification=cbgpPeer2BackwardTransNotification, ciscoBgp4MIBCompliances=ciscoBgp4MIBCompliances, cbgpPeer2PrefixClearThreshold=cbgpPeer2PrefixClearThreshold, ciscoBgp4NotificationPrefix=ciscoBgp4NotificationPrefix, cbgpPeerWithdrawnPrefixes=cbgpPeerWithdrawnPrefixes, cbgpRoute=cbgpRoute, cbgpPeer2ConnectRetryInterval=cbgpPeer2ConnectRetryInterval, cbgpRoutePeerType=cbgpRoutePeerType, cbgpPeerCapIndex=cbgpPeerCapIndex, cbgpPeerAdvertisedPrefixes=cbgpPeerAdvertisedPrefixes, cbgpPeer2BackwardTransition=cbgpPeer2BackwardTransition, cbgpRouteLocalPrefPresent=cbgpRouteLocalPrefPresent, cbgpPeer2RemotePort=cbgpPeer2RemotePort, cbgpPeer2InUpdates=cbgpPeer2InUpdates, cbgpPeer2Type=cbgpPeer2Type, ciscoBgp4PeerGroup1=ciscoBgp4PeerGroup1, cbgpPeerLastErrorTxt=cbgpPeerLastErrorTxt, cbgpRouteAtomicAggregate=cbgpRouteAtomicAggregate)
